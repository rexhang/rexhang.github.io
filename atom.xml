<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rexhang的Blog</title>
  
  <subtitle>blog</subtitle>
  <link href="https://blog.rexhang.com/atom.xml" rel="self"/>
  
  <link href="https://blog.rexhang.com/"/>
  <updated>2022-08-21T04:29:46.101Z</updated>
  <id>https://blog.rexhang.com/</id>
  
  <author>
    <name>RexHang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS中非常实用的『一行代码』</title>
    <link href="https://blog.rexhang.com/2022/08/04/articles/1/"/>
    <id>https://blog.rexhang.com/2022/08/04/articles/1/</id>
    <published>2022-08-04T04:03:28.000Z</published>
    <updated>2022-08-21T04:29:46.101Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>导读: 最近在国外技术社区看到了一些关于 <code>一行代码</code> 的文章📄，感觉很有意思，就整理了下来并且自己额外补充了一部分分享给大家🤜，希望对各位读者们有所帮助💕。</p></blockquote><h5 id="最近一次更新时间-2022-08-21-12-00-15"><a href="#最近一次更新时间-2022-08-21-12-00-15" class="headerlink" title="最近一次更新时间 2022-08-21 12:00:15"></a>最近一次更新时间 2022-08-21 12:00:15</h5><hr><p>这些方法使用到了一些API，简化了操作，但是有些方法写一行属实不太优雅，所以这里主要还是学习API的使用小技巧。</p><h4 id="一、日期处理"><a href="#一、日期处理" class="headerlink" title="一、日期处理"></a>一、日期处理</h4><ol><li>检查日期是否有效<br>该方法用于检测给出的日期是否有效</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isDateValid = <span class="function">(<span class="params">...val</span>) =&gt;</span> !<span class="built_in">Number</span>.isNaN( <span class="keyword">new</span> <span class="built_in">Date</span>(...val).valueOf() );</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line">isDateValid(<span class="string">&quot;December 17, 1995 03:24:00&quot;</span>); <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><ol start="2"><li>计算两个日期之间的间隔<br>该方法用于计算两个日期之间的间隔时间(day)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dayDif = <span class="function">(<span class="params">date1, date2</span>) =&gt;</span> <span class="built_in">Math</span>.ceil( <span class="built_in">Math</span>.abs( date1.getTime() - date2.getTime() ) / <span class="number">86400000</span>);</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line">dayDif(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2022-08-01&quot;</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2022-08-04&quot;</span>)); <span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure><ol start="3"><li>查找日期位于一年中的第几天<br>该方法用于检测给出的日期位于今年的第几天</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dayOfYear = <span class="function"><span class="params">date</span> =&gt;</span> <span class="built_in">Math</span>.floor( ( date - <span class="keyword">new</span> <span class="built_in">Date</span>(date.getFullYear(), <span class="number">0</span>, <span class="number">0</span>) ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span> )</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line">dayOfYear(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2022-08-01&quot;</span>)); <span class="comment">// =&gt; 213</span></span><br><span class="line">dayOfYear(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2022-01-01&quot;</span>)); <span class="comment">// =&gt; 1</span></span><br></pre></td></tr></table></figure><ol start="4"><li>时间格式化<br>该方法用于转换时间</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timeFromDate = <span class="function"><span class="params">date</span> =&gt;</span> date.toTimeString().slice(<span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line">timeFromDate(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2022</span>, <span class="number">08</span>, <span class="number">04</span>, <span class="number">12</span>, <span class="number">30</span>, <span class="number">0</span>)); <span class="comment">// =&gt; &#x27;12:30:00&#x27;</span></span><br><span class="line">timeFromDate(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2022</span>, <span class="number">08</span>, <span class="number">04</span>, <span class="number">12</span>, <span class="number">30</span>, <span class="number">60</span>)); <span class="comment">// =&gt; &#x27;12:31:00&#x27;</span></span><br><span class="line">timeFromDate(<span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">// =&gt; 此刻的时间</span></span><br></pre></td></tr></table></figure><h4 id="二、字符串处理"><a href="#二、字符串处理" class="headerlink" title="二、字符串处理"></a>二、字符串处理</h4><ol><li>字符串首字母大写<br>该方法用于将英文字符串的首字母大写处理</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> capitalize = <span class="function"><span class="params">str</span> =&gt;</span> str.charAt(<span class="number">0</span>).toUpperCase() + str.slice(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line">capitalize(<span class="string">&quot;hello world&quot;</span>); <span class="comment">// =&gt; Hello world</span></span><br></pre></td></tr></table></figure><ol start="2"><li>翻转字符串<br>该方法用于将一个字符串进行翻转操作并返回翻转后的内容</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reverse = <span class="function"><span class="params">str</span> =&gt;</span> str.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line">reverse(<span class="string">&quot;hello world&quot;</span>); <span class="comment">// =&gt; dlrow olleh</span></span><br></pre></td></tr></table></figure><ol start="3"><li>随机字符串<br>该方法用于生成一个随机的字符串并返回</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomString = <span class="function">() =&gt;</span> <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).slice(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line">randomString(); <span class="comment">// =&gt; anyString</span></span><br></pre></td></tr></table></figure><ol start="4"><li>去除字符串中的HTML<br>该方法用于去除字符串中的HTML元素</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stripHtml = <span class="function"><span class="params">html</span> =&gt;</span> (<span class="keyword">new</span> DOMParser().parseFromString(html, <span class="string">&#x27;text/html&#x27;</span>)).body.textContent || <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line">stripHtml(<span class="string">&quot;&lt;div&gt;Beware of the missing closing tag&lt;/div&gt;hello world&lt;i&gt;!&lt;i&gt;&quot;</span>); <span class="comment">// =&gt; &#x27;Beware of the missing closing taghello world!&#x27;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>获取URL的search参数并json化<br>该方法用于获取当前访问的URL中的search内容并解析成JSON键值对形式</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urlParams = <span class="function"><span class="params">search</span> =&gt;</span> <span class="built_in">Object</span>.fromEntries(<span class="keyword">new</span> URLSearchParams(search));</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line">urlParams(location.search); <span class="comment">// =&gt; &#123; id: &#x27;1&#x27;, name: &#x27;rexhang&#x27; &#125;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>去除数字之外的所有字符<br>该方法用于去除数字之外的所有字符</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toNumber = <span class="function"><span class="params">str</span> =&gt;</span> <span class="built_in">Number</span>(str.replace(<span class="regexp">/\D/g</span>, <span class="string">&#x27;&#x27;</span>));</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello 123 is god 456&#x27;</span>;</span><br><span class="line">toNumber(str); <span class="comment">// =&gt; 123456</span></span><br></pre></td></tr></table></figure><ol start="7"><li>空值(null | undefined)合并运算符<br>该方法用于更简短的定义空值情况下的时候, null 或者 undefined 会认定为判断范围， 其余认为正常赋值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aa = isA ?? <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> bb = isB ?? <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> cc = isC ?? <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> dd = isD ?? <span class="string">&#x27;done&#x27;</span>;</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line"><span class="keyword">const</span> isA = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> isB = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> isC = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">const</span> isD = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> aa = isA ?? <span class="string">&#x27;...&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> bb = isB ?? <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> cc = isC ?? <span class="string">&#x27;ok&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> dd = isD ?? <span class="string">&#x27;done&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(aa, bb, cc, dd);</span><br></pre></td></tr></table></figure><h4 id="二、数组处理"><a href="#二、数组处理" class="headerlink" title="二、数组处理"></a>二、数组处理</h4><ol><li>从数组中移除重复项<br>该方法用于从数组中移除重复项</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> removeDuplicates = <span class="function"><span class="params">arr</span> =&gt;</span> [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line">removeDuplicates([<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>]); <span class="comment">// =&gt; [1, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><ol start="2"><li>打乱数组顺序<br>该方法用于打乱数组顺序，随机取random后的数组</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomArr = <span class="function"><span class="params">arr</span> =&gt;</span> arr.sort(<span class="function">() =&gt;</span> <span class="number">0.5</span> - <span class="built_in">Math</span>.random());</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;🙂&#x27;</span>, <span class="string">&#x27;66&#x27;</span>, <span class="literal">true</span>, <span class="number">11</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;rexhang&#x27;</span>&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(randomArr(arr)); <span class="comment">// random arr, eg: [&#x27;66&#x27;, 11, true, &#123;name: &#x27;rexhang&#x27;&#125;, &#x27;🙂&#x27;];</span></span><br></pre></td></tr></table></figure><ol start="3"><li>从数组中随机去一个值<br>该方法用于从数组中随机去一个值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> takeARandomItem = <span class="function"><span class="params">arr</span> =&gt;</span> arr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * arr.length)]</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line"><span class="keyword">const</span> eles = [<span class="string">&#x27;🙂&#x27;</span>, <span class="string">&#x27;66&#x27;</span>, <span class="literal">true</span>, <span class="number">11</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;rexhang&#x27;</span>&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(takeARandomItem(eles)); <span class="comment">// random item of arr, eg: &#x27;🙂&#x27;;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>从数组中取出最大/小值(仅限数字|字符串数字)<br>该方法用于从数组中取出最大/小值(仅限数字|字符串数字)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getMaxMinValue = <span class="function"><span class="params">arr</span> =&gt;</span> (&#123;</span><br><span class="line">max: <span class="built_in">Math</span>.max(...arr),</span><br><span class="line">min: <span class="built_in">Math</span>.min(...arr),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line"><span class="keyword">const</span> items = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="string">&#x27;0&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(getMaxMinValue(items)); <span class="comment">// &#123; max: 12, min: 0 &#125;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>判断数组是否为空<br>该方法用于判断数组是否为空</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isNotEmpty = <span class="function"><span class="params">arr</span> =&gt;</span> <span class="built_in">Array</span>.isArray(arr) &amp;&amp; !!arr.length;</span><br><span class="line"><span class="comment">// how to use</span></span><br><span class="line">isNotEmpty([<span class="number">1</span>, <span class="number">3</span>]); <span class="comment">// =&gt; true</span></span><br><span class="line">isNotEmpty([]); <span class="comment">// =&gt; true</span></span><br><span class="line">isNotEmpty(<span class="string">&quot;[1, 3]&quot;</span>); <span class="comment">// =&gt; 非数组返回false</span></span><br></pre></td></tr></table></figure><hr><h4 id="长期且持续更新中…"><a href="#长期且持续更新中…" class="headerlink" title="长期且持续更新中…"></a>长期且持续更新中…</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;导读: 最近在国外技术社区看到了一些关于 &lt;code&gt;一行代码&lt;/code&gt; 的文章📄，感觉很有意思，就整理了下来并且自己额外补充了一部分分享给大家🤜，希望对各位读者们有所帮助💕。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;最近一次</summary>
      
    
    
    
    <category term="大前端" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    <category term="效率" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E6%95%88%E7%8E%87/"/>
    
    <category term="前端开发" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E6%95%88%E7%8E%87/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="javascript" scheme="https://blog.rexhang.com/tags/javascript/"/>
    
    <category term="javascript数组" scheme="https://blog.rexhang.com/tags/javascript%E6%95%B0%E7%BB%84/"/>
    
    <category term="javascript字符串" scheme="https://blog.rexhang.com/tags/javascript%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="js小tips" scheme="https://blog.rexhang.com/tags/js%E5%B0%8Ftips/"/>
    
    <category term="js技巧" scheme="https://blog.rexhang.com/tags/js%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>一套面向常规统计图表，以数据驱动的高交互可视化图形语法 - G2</title>
    <link href="https://blog.rexhang.com/2022/08/04/articles/2/"/>
    <id>https://blog.rexhang.com/2022/08/04/articles/2/</id>
    <published>2022-08-04T01:27:08.000Z</published>
    <updated>2022-08-04T14:41:49.523Z</updated>
    
    <content type="html"><![CDATA[<h1 align="center"><b>G2</b></h1><div align="center"><p>一套面向常规统计图表，以数据驱动的高交互可视化图形语法。</p><p><a href="https://travis-ci.org/antvis/g2"><img src="https://img.shields.io/travis/antvis/g2.svg"></a> <img src="https://github.com/antvis/G2/workflows/CI/badge.svg" alt="CI"> <a href="https://coveralls.io/github/antvis/G2?branch=master"><img src="https://coveralls.io/repos/github/antvis/G2/badge.svg?branch=master" alt="Coverage Status"></a> <a href="https://www.npmjs.com/package/@antv/g2"><img src="https://img.shields.io/npm/v/@antv/g2.svg" alt="NPM Package"></a> <a href="https://npmjs.org/package/@antv/g2"><img src="http://img.shields.io/npm/dm/@antv/g2.svg" alt="NPM Downloads"></a> <img src="https://img.shields.io/badge/dependencies-up%20to%20date-brightgreen.svg" alt="Dependencies"> <a href="http://isitmaintained.com/project/antvis/g2" title="Percentage of issues still open"><img src="http://isitmaintained.com/badge/open/antvis/g2.svg" alt="Percentage of issues still open"></a> <a href="https://github.com/antvis/g2/pulls"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=shields" alt="PRs Welcome"></a></p><p><img src="https://img.shields.io/badge/language-TypeScript-red.svg"> <img src="https://img.shields.io/badge/license-MIT-000000.svg"></p><p><a href="https://twitter.com/AntV_Alipay"><img src="https://img.shields.io/twitter/follow/AntV_Alipay.svg?label=AntV&style=social"></a></p></div><p align="center">  <a href="https://g2.antv.vision/zh">网站</a> •  <a href="https://g2.antv.vision/zh/docs/manual/about-g2">教程文档</a> •  <a href="https://www.yuque.com/antv">博客</a> •  <a href="https://github.com/antvis/G2Plot">G2Plot</a></p><p>G2 是一套基于图形语法理论的可视化底层引擎，以数据驱动，提供图形语法与交互语法，具有高度的易用性和扩展性。使用 G2，你可以无需关注图表各种繁琐的实现细节，一条语句即可使用 Canvas 或 SVG 构建出各种各样的可交互的统计图表。</p><h2 id="📺-线上示例"><a href="#📺-线上示例" class="headerlink" title="📺 线上示例"></a>📺 线上示例</h2><p><a href="https://g2.antv.vision/zh/examples/gallery"><img src="https://user-images.githubusercontent.com/6628666/75466330-fe1d0c00-59c4-11ea-91ba-506f60ef8af4.png" style='width: 100%'/></a></p><h2 id="✨-特性"><a href="#✨-特性" class="headerlink" title="✨ 特性"></a>✨ 特性</h2><ul><li>💯 完善的图形语法：数据到图形的映射，能够绘制出所有的图表。</li><li>🤩 全新的交互语法：通过触发和反馈机制可以组合出各种交互行为，对数据进行探索。</li><li>🦍 强大的 View 模块：可支持开发个性化的数据多维分析图形。</li><li>👬 双引擎渲染：Canvas 或 SVG 任意切换。</li><li>💄 可视化组件体系：面向交互、体验优雅。</li><li>🛡 全面拥抱 TypeScript：提供完整的类型定义文件。</li></ul><h2 id="📦-安装"><a href="#📦-安装" class="headerlink" title="📦 安装"></a>📦 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install @antv/g2</span><br></pre></td></tr></table></figure><h2 id="🔨-快速上手"><a href="#🔨-快速上手" class="headerlink" title="🔨 快速上手"></a>🔨 快速上手</h2><img src="https://gw.alipayobjects.com/mdn/rms_2274c3/afts/img/A*8qbLQb7A0loAAAAAAAAAAABkARQnAQ" style="width: 600px"><p>在绘图前我们需要为 G2 准备一个 DOM 容器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;c1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Chart &#125; <span class="keyword">from</span> <span class="string">&#x27;@antv/g2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123; <span class="attr">genre</span>: <span class="string">&#x27;Sports&#x27;</span>, <span class="attr">sold</span>: <span class="number">275</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">genre</span>: <span class="string">&#x27;Strategy&#x27;</span>, <span class="attr">sold</span>: <span class="number">115</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">genre</span>: <span class="string">&#x27;Action&#x27;</span>, <span class="attr">sold</span>: <span class="number">120</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">genre</span>: <span class="string">&#x27;Shooter&#x27;</span>, <span class="attr">sold</span>: <span class="number">350</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">genre</span>: <span class="string">&#x27;Other&#x27;</span>, <span class="attr">sold</span>: <span class="number">150</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 1: 创建 Chart 对象</span></span><br><span class="line"><span class="keyword">const</span> chart = <span class="keyword">new</span> Chart(&#123;</span><br><span class="line">  container: <span class="string">&#x27;c1&#x27;</span>, <span class="comment">// 指定图表容器 ID</span></span><br><span class="line">  width: <span class="number">600</span>, <span class="comment">// 指定图表宽度</span></span><br><span class="line">  height: <span class="number">300</span>, <span class="comment">// 指定图表高度</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 2: 载入数据源</span></span><br><span class="line">chart.data(data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 3: 创建图形语法，绘制柱状图</span></span><br><span class="line">chart.interval().position(<span class="string">&#x27;genre*sold&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 4: 渲染图表</span></span><br><span class="line">chart.render();</span><br></pre></td></tr></table></figure><h2 id="⌨️-本地开发"><a href="#⌨️-本地开发" class="headerlink" title="⌨️ 本地开发"></a>⌨️ 本地开发</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行测试用例</span></span><br><span class="line">$ npm run <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 electron 运行测试用例，监听文件变化构建</span></span><br><span class="line">$ npm run test-live</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行 CI</span></span><br><span class="line">$ npm run ci</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行网站</span></span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure><h2 id="🏷️-版本"><a href="#🏷️-版本" class="headerlink" title="🏷️ 版本"></a>🏷️ 版本</h2><ul><li>v3.5.x: <a href="https://github.com/antvis/G2/tree/v3.5.x">https://github.com/antvis/G2/tree/v3.5.x</a></li><li>v4.0.x: <a href="https://github.com/antvis/G2/tree/v4.0.x">https://github.com/antvis/G2/tree/v4.0.x</a></li></ul><blockquote><p>你也可以在业务中使用基于 G2 封装的常规统计图表 <strong><a href="https://github.com/antvis/G2Plot">G2Plot</a></strong> ，可以使用配置的方式快速生成一个通用图表，降低开发者的使用成本。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 align=&quot;center&quot;&gt;
&lt;b&gt;G2&lt;/b&gt;
&lt;/h1&gt;

&lt;div align=&quot;center&quot;&gt;

&lt;p&gt;一套面向常规统计图表，以数据驱动的高交互可视化图形语法。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/antvis/g2&quot;&gt;</summary>
      
    
    
    
    <category term="大前端" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    <category term="图表" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%9B%BE%E8%A1%A8/"/>
    
    <category term="G2" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%9B%BE%E8%A1%A8/G2/"/>
    
    
    <category term="javascript" scheme="https://blog.rexhang.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React代码整洁优化实践</title>
    <link href="https://blog.rexhang.com/2022/08/02/articles/1/"/>
    <id>https://blog.rexhang.com/2022/08/02/articles/1/</id>
    <published>2022-08-02T14:16:48.000Z</published>
    <updated>2022-08-04T14:41:49.524Z</updated>
    
    <content type="html"><![CDATA[<h5 id="整洁的代码不仅仅是正常运行的代码，更是要求易于阅读、简单易懂、组织整齐。"><a href="#整洁的代码不仅仅是正常运行的代码，更是要求易于阅读、简单易懂、组织整齐。" class="headerlink" title="整洁的代码不仅仅是正常运行的代码，更是要求易于阅读、简单易懂、组织整齐。"></a>整洁的代码不仅仅是正常运行的代码，更是要求易于阅读、简单易懂、组织整齐。</h5><h5 id="在本文中，我会们将示例几种代码整洁案例。"><a href="#在本文中，我会们将示例几种代码整洁案例。" class="headerlink" title="在本文中，我会们将示例几种代码整洁案例。"></a>在本文中，我会们将示例几种代码整洁案例。</h5><h5 id="在阅读这些建议时，要记住这些只是建议！-如果你不同意它们中的任何一个，那也完全没关系。"><a href="#在阅读这些建议时，要记住这些只是建议！-如果你不同意它们中的任何一个，那也完全没关系。" class="headerlink" title="在阅读这些建议时，要记住这些只是建议！ 如果你不同意它们中的任何一个，那也完全没关系。"></a>在阅读这些建议时，要记住这些只是建议！ 如果你不同意它们中的任何一个，那也完全没关系。</h5><h5 id="以下这些实践，个人觉得对我自己编写-React-代码很有帮助。"><a href="#以下这些实践，个人觉得对我自己编写-React-代码很有帮助。" class="headerlink" title="以下这些实践，个人觉得对我自己编写 React 代码很有帮助。"></a>以下这些实践，个人觉得对我自己编写 React 代码很有帮助。</h5><h2 id="1-仅对一个条件进行渲染"><a href="#1-仅对一个条件进行渲染" class="headerlink" title="1. 仅对一个条件进行渲染"></a>1. 仅对一个条件进行渲染</h2><blockquote><p>如果需要在条件为<code>true</code>时渲染某些内容，而在条件为<code>false</code>时不渲染任何内容，不推荐使用三元表达式，改用<strong>与运算符</strong><code>&amp;&amp;</code>，它可以方便地条件渲染一个元素。</p></blockquote><p>优化前:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TopNav = <span class="function">(<span class="params">props: &#123; showSearch?: boolean &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; showSearch = <span class="literal">false</span> &#125; = props;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div className=<span class="string">&quot;doc-head&quot;</span>&gt;</span><br><span class="line">&#123;<span class="comment">/* 三元表达式进行条件渲染 */</span>&#125;</span><br><span class="line">&#123;showSearch ? <span class="xml"><span class="tag">&lt;<span class="name">SearchBox</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入关键词搜索&quot;</span> <span class="attr">onSearch</span>=<span class="string">&#123;(keyword)</span> =&gt;</span> window.location.assign(`/privatecloud/search?q=$&#123;keyword&#125;`)&#125; style=&#123;&#123; marginRight: 100 &#125;&#125; /&gt;</span> : <span class="literal">null</span>&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>优化后:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> TopNav = <span class="function">(<span class="params">props: &#123; showSearch?: boolean &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; showSearch = <span class="literal">false</span> &#125; = props;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div className=<span class="string">&quot;doc-head&quot;</span>&gt;</span><br><span class="line">&#123;<span class="comment">/* 与运算符&amp;&amp;进行条件渲染 */</span>&#125;</span><br><span class="line">&#123;showSearch &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">SearchBox</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入关键词搜索&quot;</span> <span class="attr">onSearch</span>=<span class="string">&#123;(keyword)</span> =&gt;</span> window.location.assign(`/privatecloud/search?q=$&#123;keyword&#125;`)&#125; style=&#123;&#123; marginRight: 100 &#125;&#125; /&gt;</span>&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-每一个条件都可能进行渲染"><a href="#2-每一个条件都可能进行渲染" class="headerlink" title="2. 每一个条件都可能进行渲染"></a>2. 每一个条件都可能进行渲染</h2><blockquote><p>如果需要在条件为 true 时渲染某些内容，而在条件为 false 时渲染其他内容。推荐使用<code>三元表达式</code>！</p></blockquote><p>优化前:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">/* 条件 True 和 False 都要渲染内容 */</span>&#125;</span><br><span class="line">&#123; good &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Good!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> &#125;</span><br><span class="line">&#123; !good &amp;&amp; &lt;p&gt;&lt;b&gt;Not Good!&lt;b&gt;&lt;/p&gt; &#125;</span><br></pre></td></tr></table></figure><p>优化后:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 三元表达式 */</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">good ? (</span><br><span class="line">&lt;p&gt;Good!&lt;/p&gt;</span><br><span class="line">) : (</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;b&gt;Not Good!&lt;/b&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-组件-Boolean-props-传参"><a href="#3-组件-Boolean-props-传参" class="headerlink" title="3. 组件 Boolean props 传参"></a>3. 组件 Boolean props 传参</h2><blockquote><p>组件接收参数的属性值为布尔类型, 并且传入 true 值时，可以省略填写值，并不会影响组件内取到 true 值</p></blockquote><p>优化前:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Hello disabled=&#123;<span class="literal">true</span>&#125; /&gt;</span><br><span class="line">&lt;Hello disabled=&#123;<span class="literal">false</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p>优化后:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Hello disabled /&gt;</span><br><span class="line">&lt;Hello disabled=&#123;<span class="literal">false</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><h2 id="4-组件-String-props-传参"><a href="#4-组件-String-props-传参" class="headerlink" title="4. 组件 String props 传参"></a>4. 组件 String props 传参</h2><blockquote><p>组件 Props 值为 String, 推荐使用双引号包裹，不使用花括号或反引号。</p></blockquote><p>优化前:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Hello personName=&#123;<span class="string">&quot;Jim&quot;</span>&#125; /&gt;</span><br><span class="line">&lt;Hello personName=&#123;<span class="string">&#x27;Tom&#x27;</span>&#125; /&gt;</span><br><span class="line">&lt;Hello personName=&#123;<span class="string">`Ken`</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p>优化后:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Hello personName=<span class="string">&quot;Jim&quot;</span> /&gt;</span><br><span class="line">&lt;Hello personName=<span class="string">&quot;Tom&quot;</span> /&gt;</span><br><span class="line">&lt;Hello personName=<span class="string">&quot;Ken&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h2 id="5-Event-handler-functions"><a href="#5-Event-handler-functions" class="headerlink" title="5. Event handler functions"></a>5. Event handler functions</h2><blockquote><p>如果一个事件函数只接受一个参数，不需要传入匿名函数：onChange={ e =&gt; handleChange(e) }，推荐这种写法(直接等于函数)： onChange={ handleChange } 。</p></blockquote><p>优化前:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.info(e.target.value);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;input id=<span class="string">&quot;name&quot;</span> value=&#123;inputValue&#125; onChange=&#123;<span class="function">(<span class="params">e</span>) =&gt;</span> handleChange(e)&#125; /&gt;;</span><br></pre></td></tr></table></figure><p>优化后:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.info(e.target.value);</span><br><span class="line">&#125;;</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 事件只有一个参数，不需要匿名函数*/</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;input id=<span class="string">&quot;name&quot;</span> value=&#123;inputValue&#125; onChange=&#123;handleChange&#125; /&gt;;</span><br></pre></td></tr></table></figure><h2 id="6-components-as-props"><a href="#6-components-as-props" class="headerlink" title="6. components as props"></a>6. components as props</h2><blockquote><p>将组件作为参数传递给另一个组件时，如果该组件不接受任何参数，则无需将该传递的组件包装在函数中。</p></blockquote><p>优化前:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Hello ClockComponent=&#123;<span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Clock</span> <span class="attr">timestamp</span>=<span class="string">&#123;new</span> <span class="attr">Date</span>()<span class="attr">.getTime</span>()&#125; /&gt;</span></span>&#125; /&gt;</span><br><span class="line">&lt;Hello ClockComponent=&#123;<span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span></span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p>优化后:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Hello ClockComponent=&#123;<span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Clock</span> <span class="attr">timestamp</span>=<span class="string">&#123;new</span> <span class="attr">Date</span>()<span class="attr">.getTime</span>()&#125; /&gt;</span></span>&#125; /&gt;</span><br><span class="line">&lt;Hello ClockComponent=&#123;Clock&#125; /&gt;</span><br></pre></td></tr></table></figure><h2 id="7-设置-state-依赖先前的-state"><a href="#7-设置-state-依赖先前的-state" class="headerlink" title="7. 设置 state 依赖先前的 state"></a>7. 设置 state 依赖先前的 state</h2><blockquote><p>如果新 state 依赖于先前 state，则始终将 state 设置为先前 state 的函数。可以批处理 React 状态更新。</p></blockquote><p>优化前:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Hello = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> [cout, setCount] = useState &lt; number &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依赖先前/上一个的state值 (异步调用)</span></span><br><span class="line"><span class="keyword">const</span> handleClick = <span class="function">(<span class="params">e</span>) =&gt;</span> setCount(cout + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 期望执行2次 首次执行理应 cout = 2</span></span><br><span class="line"><span class="keyword">const</span> handleClickRunDouble = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 执行第二个handleClick执行的时候第一个count设置未完成(异步的)，所以还是 count = 0 = 0 + 1 = 1 因此 首次的点击得到的值 = 1 而并非2, 如果需要实现2 那么就得利用setState的批处理方式</span></span><br><span class="line">handleClick(e);</span><br><span class="line">handleClick(e);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;button onclick=&#123;handleClick&#125;&gt;click here&lt;/button&gt;</span><br><span class="line">&lt;span&gt;&#123;count&#125;&lt;/span&gt;</span><br><span class="line">&lt;button onclick=&#123;handleClickRunDouble&#125;&gt;click here &amp; lunch <span class="number">2</span> times&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>优化后:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Hello = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> [cout, setCount] = useState &lt; number &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 将set调用设置为批处理模式 使用set方法提供的callback内的数值 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> handleClick = <span class="function">(<span class="params">e</span>) =&gt;</span> setCount(<span class="function">(<span class="params">c</span>) =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首次调用后会输出最新的值 count = 2;</span></span><br><span class="line"><span class="keyword">const</span> handleClickRunDouble = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">handleClick(e);</span><br><span class="line">handleClick(e);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;button onclick=&#123;handleClick&#125;&gt;click here&lt;/button&gt;</span><br><span class="line">&lt;span&gt;&#123;count&#125;&lt;/span&gt;</span><br><span class="line">&lt;button onclick=&#123;handleClickRunDouble&#125;&gt;click here &amp; lunch <span class="number">2</span> times&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>以上 7 个就是我推荐和总结的几个<code>React</code><strong>代码整洁优化实践</strong> 。</p><p>最后，祝大家<strong>开发愉快</strong>！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;整洁的代码不仅仅是正常运行的代码，更是要求易于阅读、简单易懂、组织整齐。&quot;&gt;&lt;a href=&quot;#整洁的代码不仅仅是正常运行的代码，更是要求易于阅读、简单易懂、组织整齐。&quot; class=&quot;headerlink&quot; title=&quot;整洁的代码不仅仅是正常运行的代码，更是要</summary>
      
    
    
    
    <category term="大前端" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试经" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E7%BB%8F/"/>
    
    
    <category term="javascript" scheme="https://blog.rexhang.com/tags/javascript/"/>
    
    <category term="React" scheme="https://blog.rexhang.com/tags/React/"/>
    
    <category term="前端框架" scheme="https://blog.rexhang.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>数组的一些常用方法及使用区别</title>
    <link href="https://blog.rexhang.com/2021/05/14/articles/1/"/>
    <id>https://blog.rexhang.com/2021/05/14/articles/1/</id>
    <published>2021-05-13T16:22:22.000Z</published>
    <updated>2022-08-02T14:05:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>push pop unshift shift splice slice split join 方法及使用区别</p><h3 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// push pop unshift shift splice slice split join</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// push、unshift向数组的 尾部/头部 添加若干元素，并返回 数组的 新长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = arr.push(<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>); <span class="comment">// -&gt; new length</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = arr.unshift(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>); <span class="comment">// -&gt; new length</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// pop、shift向数组的 尾部/头部 删除一个元素 并返回 数组中 被删除的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = arr.pop(); <span class="comment">// -&gt; last item</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = arr.shift(); <span class="comment">// -&gt; first item</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> e = arr.push();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = [].pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = [].shift();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(e);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(f);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(g);</span><br><span class="line"></span><br><span class="line"><span class="comment">// splice 向/从数组中添加/删除项目，然后返回被删除的项目集合[?1, ?2]。 -1开始反方向删除(末尾第一个) 即便是负数 也都是从左到右删除单位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> h = arr.splice(-<span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;rex&#x27;</span>, <span class="string">&#x27;hang&#x27;</span>, <span class="string">&#x27;gu&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(h);</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice 只对数组范围做截取 并返回 截取的内容</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i = arr.slice(<span class="number">1</span>, -<span class="number">2</span>); <span class="comment">// 区间 -&gt; (?] 不包含末尾</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// split 用于 把一个有标记的字符串 分割成 标准数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> j = <span class="string">&#x27;a|b|c&#x27;</span>.split(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(j);</span><br><span class="line"></span><br><span class="line"><span class="comment">// join 用于 把一个标准数组 变成 固定符号分隔的 字符串</span></span><br><span class="line"><span class="keyword">const</span> k = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>].join(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(k);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p>控制台输出内容如图所示:<br><img src="/images/blog/2021-05-14/1.png" alt="效果图显示失败" title="运行效果如图"></p><p>看完上述例子后，我想大家都应该大致明白了这些方法的使用区别。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;push pop unshift shift splice slice split join 方法及使用区别&lt;/p&gt;
&lt;h3</summary>
      
    
    
    
    <category term="大前端" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试经" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E7%BB%8F/"/>
    
    
    <category term="javascript" scheme="https://blog.rexhang.com/tags/javascript/"/>
    
    <category term="javascript数组" scheme="https://blog.rexhang.com/tags/javascript%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>探讨下前端开发过程中在苹果系统下的一些兼容性小坑以及解决方案</title>
    <link href="https://blog.rexhang.com/2021/01/12/articles/1/"/>
    <id>https://blog.rexhang.com/2021/01/12/articles/1/</id>
    <published>2021-01-12T13:20:30.000Z</published>
    <updated>2022-08-02T14:05:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>导读: 本文会长期更新，目前仅写出已收集并且经过验证的案例分享🙉</p></blockquote><p>大家在做前端开发过程中势必会和H5打交道<code>&lt;这里指的H5仅表示在苹果系统下运行的H5&gt;</code>，在原本不应该出现的<strong>异常行为</strong>经常会搞得稀里糊涂，遂去各类搜索引擎搜索结局方案，本文故此摘录各类表现在苹果环境下的开发“异常行为”，并且给出大概可行的兼容方案来帮助大家单项搜集的烦恼</p><h3 id="可能存在兼容性问题搜集"><a href="#可能存在兼容性问题搜集" class="headerlink" title="可能存在兼容性问题搜集"></a>可能存在兼容性问题搜集</h3><hr><h4 id="1-Date-parse"><a href="#1-Date-parse" class="headerlink" title="1.Date.parse()"></a>1.Date.parse()</h4><blockquote><p>parse() 方法可解析一个日期时间字符串，并返回 1970/1/1 午夜距离该日期时间的毫秒数。<a href="https://www.w3school.com.cn/js/jsref_parse.asp">W3C参考文档</a></p></blockquote><p>代码部分:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>.parse(<span class="string">&quot;2020-02-02 00:00:00&quot;</span>)</span><br></pre></td></tr></table></figure><p>可能会在苹果环境中出现<code>NaN</code>的返回结果</p><p>解决方案是:</p><ol><li>不使用<strong>具体时间</strong> =&gt; <code>Date.parse(&quot;2020-02-02&quot;)</code></li><li>使用“**/<strong>”代替“</strong>-**”来分割日期 =&gt; <code>Date.parse(&quot;2020/02/02 00:00:00&quot;)</code></li><li>替换字符串为第二种方案 =&gt; <code>Date.parse(&quot;2020-02-02 00:00:00&quot;.replace(/-/g, &#39;/&#39;))</code></li></ol><h4 id="2-window-open"><a href="#2-window-open" class="headerlink" title="2.window.open()"></a>2.window.open()</h4><blockquote><p>open() 方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。<a href="https://www.w3school.com.cn/jsref/met_win_open.asp">W3C参考文档</a></p></blockquote><p>代码部分:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">&#x27;//rexhang.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p>可能会在苹果环境中出现被阻止打开的情况，这是由于苹果安全策略进行了拦截</p><p>解决方案是:</p><ol><li>使用<code>window.location.href = &#39;//rexhang.com&#39;</code>代替</li><li>使用<code>window.location.replace(&#39;//rexhang.com&#39;)</code>代替</li></ol><h4 id="3-待博主更新…"><a href="#3-待博主更新…" class="headerlink" title="3.待博主更新…"></a>3.待博主更新…</h4><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><hr><p>这样的坑还有许多许多不仅仅是ios还有android也会存在一些兼容性问题，本文会长期更新，尽可能搜集更多的兼容案例，如有更多案例本文未提到的，希望大家踊跃提出，反馈在下方评论里，多谢大家~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;导读: 本文会长期更新，目前仅写出已收集并且经过验证的案例分享🙉&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大家在做前端开发过程中势必会和H5打交道&lt;code&gt;&amp;lt;这里指的H5仅表示在苹果系统下运行的H5&amp;gt;&lt;/code&gt;，在原本不应该出</summary>
      
    
    
    
    <category term="大前端" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    <category term="兼容性" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
    <category term="心得" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%85%BC%E5%AE%B9%E6%80%A7/%E5%BF%83%E5%BE%97/"/>
    
    
    <category term="javascript" scheme="https://blog.rexhang.com/tags/javascript/"/>
    
    <category term="前端多端开发兼容性" scheme="https://blog.rexhang.com/tags/%E5%89%8D%E7%AB%AF%E5%A4%9A%E7%AB%AF%E5%BC%80%E5%8F%91%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
    <category term="ios" scheme="https://blog.rexhang.com/tags/ios/"/>
    
    <category term="macos" scheme="https://blog.rexhang.com/tags/macos/"/>
    
    <category term="apple" scheme="https://blog.rexhang.com/tags/apple/"/>
    
    <category term="苹果" scheme="https://blog.rexhang.com/tags/%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>Vue双向绑定的原理</title>
    <link href="https://blog.rexhang.com/2021/01/10/articles/2/"/>
    <id>https://blog.rexhang.com/2021/01/10/articles/2/</id>
    <published>2021-01-10T07:56:57.000Z</published>
    <updated>2022-08-02T14:05:21.998Z</updated>
    
    <content type="html"><![CDATA[<h3 id="双向绑定原理及简单实现"><a href="#双向绑定原理及简单实现" class="headerlink" title="双向绑定原理及简单实现"></a>双向绑定原理及简单实现</h3><p>Vue是采用数据劫持结合发布者-订阅者模式的方式，通过new Proxy()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><blockquote><p>Vue3.x与Vue2.x的区别仅是数据劫持的方式由Object.defineProperty更改为Proxy代理，其他代码不变<br>Vue最核心的功能有两个，一是响应式的数据绑定系统，二是组件系统。本文仅探究双向绑定是怎样实现的。以及实现一个简化版的**<code>Vue-lite</code>**</p></blockquote><h4 id="一、访问器属性"><a href="#一、访问器属性" class="headerlink" title="一、访问器属性"></a>一、访问器属性</h4><p>访问器属性是对象中的一种特殊属性，它不能直接在对象中设置，而必须通过<code>defineProperty()</code>方法单独定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;hello&#x27;</span>, &#123;</span><br><span class="line">    set: <span class="function"><span class="params">newVal</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;set方法被调用了&#x27;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;newVal=&#x27;</span>+newVal);</span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;get方法被调用了&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">obj.hello = <span class="string">&#x27;xxx&#x27;</span>; <span class="comment">// 会触发访问器属性中的set方法 参数是xxx</span></span><br><span class="line">obj.hello <span class="comment">// 会触发访问器属性中的get方法</span></span><br></pre></td></tr></table></figure><p>其中**get(),set()**方法就是实现双向绑定的关键</p><h4 id="二、极简双向绑定的实现"><a href="#二、极简双向绑定的实现" class="headerlink" title="二、极简双向绑定的实现"></a>二、极简双向绑定的实现</h4><p>html部分:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-lite<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;inputs&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;tips&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>设置新值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/Vue-lite.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue-lite.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputs = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#inputs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> tips = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#tips&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#btn&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;hello&#x27;</span>, &#123;</span><br><span class="line">    set: <span class="function"><span class="params">newVal</span> =&gt;</span> &#123;</span><br><span class="line">        inputs.value = newVal;</span><br><span class="line">        tips.innerHTML = newVal;</span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;get方法被调用了&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;123&#x27;</span>; <span class="comment">// 可以对值进行修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">obj.hello = <span class="string">&#x27;xxx&#x27;</span>; <span class="comment">// 会触发访问器属性中的set方法 参数是xxx</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.hello); <span class="comment">// 会触发访问器属性中的get方法</span></span><br><span class="line">inputs.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">    obj.hello = e.target.value;</span><br><span class="line">&#125;);</span><br><span class="line">btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">    obj.hello = <span class="string">&#x27;233&#x27;</span>; <span class="comment">// set数据</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 实现了 model =&gt; view 以及 view =&gt; model 的双向绑定。</span></span><br><span class="line"><span class="comment">// 以上就是 Vue2.x 实现双向绑定的基本原理。</span></span><br></pre></td></tr></table></figure><p>此例实现的效果是：随文本框输入文字的变化，span 中会同步显示相同的文字内容；在js或控制台显式的修改 obj.hello 的值，视图会相应更新。这样就实现了 model =&gt; view 以及 view =&gt; model 的双向绑定，就是Vue实现双向绑定的最基本原理。</p><h4 id="三、细节优化"><a href="#三、细节优化" class="headerlink" title="三、细节优化"></a>三、细节优化</h4><p>上述示例仅仅是为了说明原理。我们最终要实现的是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>姓名: <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">v-mode</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>您输入的name是: &#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">&#x27;rexhang&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>首先做下需要实现功能点:</p><ol><li>输入框以及文本节点与 data 中的数据绑定</li><li>输入框内容变化时，data 中的数据同步变化。即 view =&gt; model 的变化</li><li>data 中的数据变化时，文本节点的内容同步变化。即 model =&gt; view 的变化</li></ol><p>html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/Vue-lite.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            name: <span class="string">&#x27;rexhang&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue-lite.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nodeToFragment</span>(<span class="params">node, vm</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// createDocumentFragment()方法，是用来创建一个虚拟的节点对象，或者说，是用来创建文档碎片节点。它可以包含各种类型的节点，在创建之初是空的。</span></span><br><span class="line">    <span class="keyword">let</span> virtualDOM = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line">    <span class="keyword">let</span> child;</span><br><span class="line">    <span class="keyword">while</span>( child = node.firstChild)&#123;</span><br><span class="line">        compile(child, vm)</span><br><span class="line">        virtualDOM.appendChild(child);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> virtualDOM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compile</span> (<span class="params">node, vm</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(node);</span><br><span class="line">    <span class="built_in">console</span>.log(node.nodeType);</span><br><span class="line">    <span class="keyword">if</span> (node.nodeType === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">// 节点类型是元素</span></span><br><span class="line">        <span class="keyword">const</span> attr = node.attributes;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; attr.length; i++)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(attr[i].nodeName);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(attr[i].nodeName === <span class="string">&#x27;v-model&#x27;</span>)&#123;</span><br><span class="line">                <span class="comment">// 提取v-model的value</span></span><br><span class="line">                <span class="keyword">const</span> name = attr[i].nodeValue;</span><br><span class="line"></span><br><span class="line">                node.addEventListener(<span class="string">&#x27;input&#x27;</span>, <span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">                    vm[name] = e.target.value;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">// 将data的值赋给该node</span></span><br><span class="line">                <span class="comment">// node.value = vm.data[name];</span></span><br><span class="line">                node.value = vm[name];</span><br><span class="line">                node.removeAttribute(<span class="string">&#x27;v-model&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.nodeType === <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="comment">// 节点类型是text</span></span><br><span class="line">        <span class="keyword">if</span>(reg.test(node.nodeValue))&#123;</span><br><span class="line">            <span class="comment">// 正则来获取匹配到的字符串&#123;&#123;name&#125;&#125; =&gt; name</span></span><br><span class="line">            <span class="keyword">let</span> name = node.nodeValue.match(reg)[<span class="number">1</span>].trim();</span><br><span class="line">            <span class="comment">// 将data的值赋给该node</span></span><br><span class="line">            <span class="comment">// node.nodeValue = vm.data[name];</span></span><br><span class="line">            <span class="comment">// node.nodeValue = vm[name];</span></span><br><span class="line">            <span class="built_in">console</span>.log(vm, node, name);</span><br><span class="line">            <span class="keyword">new</span> Watcher(vm, node, name);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">        set: <span class="function"><span class="params">newVal</span> =&gt;</span>　&#123;</span><br><span class="line">            <span class="keyword">if</span>(newVal === val) <span class="keyword">return</span>;</span><br><span class="line">            val = newVal;</span><br><span class="line">            <span class="built_in">console</span>.log(val);</span><br><span class="line">            dep.notify();</span><br><span class="line">        &#125;,</span><br><span class="line">        get: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(Dep.target) dep.addSub(Dep.target);</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span> (<span class="params">obj, vm</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">        defineReactive(vm, key, obj[key]);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dep = <span class="keyword">new</span> Dep();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pub = &#123;</span><br><span class="line">    publish: <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        dep.notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sub1 = &#123; <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>); &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> sub2 = &#123; <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>); &#125; &#125;</span><br><span class="line"><span class="keyword">const</span> sub3 = &#123; <span class="attr">update</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">3</span>); &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this.subs = [sub1, sub2, sub3];</span></span><br><span class="line">    <span class="built_in">this</span>.subs = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dep.prototype.notify = function()&#123;</span></span><br><span class="line"><span class="comment">//     this.subs.forEach(sub=&gt;&#123;</span></span><br><span class="line"><span class="comment">//         sub.update();</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">Dep.prototype.addSub = <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.subs.push(sub)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep.prototype.notify = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.subs.forEach(<span class="function"><span class="params">sub</span>=&gt;</span>&#123;</span><br><span class="line">        sub.update();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pub.publish();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, node, name</span>)</span>&#123;</span><br><span class="line">    Dep.target = <span class="built_in">this</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.node = node;</span><br><span class="line">    <span class="built_in">this</span>.vm = vm;</span><br><span class="line">    <span class="built_in">this</span>.update();</span><br><span class="line">    Dep.target = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Watcher.prototype = &#123;</span><br><span class="line">    update: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.get();</span><br><span class="line">        <span class="built_in">this</span>.node.nodeValue = <span class="built_in">this</span>.value;</span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.value = <span class="built_in">this</span>.vm[<span class="built_in">this</span>.name];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data = opt.data;</span><br><span class="line">    observe(<span class="built_in">this</span>.data, <span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">const</span> rootDom = opt.el;</span><br><span class="line">    <span class="keyword">const</span> dom = nodeToFragment(<span class="built_in">document</span>.querySelector(rootDom), <span class="built_in">this</span>);</span><br><span class="line">    <span class="comment">// 编译完成，将dom返回到app中</span></span><br><span class="line">    <span class="built_in">document</span>.querySelector(rootDom).appendChild(dom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终实现效果:<br><img src="/images/blog/2021-01-10/1.gif" alt="效果图显示失败" title="运行效果如图"></p><h4 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h4><blockquote><ul><li><strong><code>Object.defineProperty</code></strong> 来进行数据中转(劫持)，从而实现事件的发布和后续触发订阅者的监听来实现数据绑定</li><li>实现一个监听器 <strong><code>observe</code></strong> 用来劫持并监听所有属性，如有变动，就通知订阅者</li><li>实现一个订阅者 <strong><code>Watcher</code></strong> 每个Watcher都绑定一个更新函数，可以把收到的属性变化通知并执行相应的函数，更新视图</li><li>实现一个解析器 <strong><code>compile</code></strong> 可以循环解析全部节点获取相关指令，初始化数据，初始化订阅</li></ul></blockquote><p><a href="https://www.cnblogs.com/kidney/p/6052935.html?utm_source=gold_browser_extension" title="点击跳转到参考链接">原文参考</a> <a href="https://blog.csdn.net/weixin_44489221/article/details/102668017" title="点击跳转到参考链接">Vue3.x双向绑定原理的实现参考</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;双向绑定原理及简单实现&quot;&gt;&lt;a href=&quot;#双向绑定原理及简单实现&quot; class=&quot;headerlink&quot; title=&quot;双向绑定原理及简单实现&quot;&gt;&lt;/a&gt;双向绑定原理及简单实现&lt;/h3&gt;&lt;p&gt;Vue是采用数据劫持结合发布者-订阅者模式的方式，通过new Pro</summary>
      
    
    
    
    <category term="大前端" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试经" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E7%BB%8F/"/>
    
    
    <category term="javascript" scheme="https://blog.rexhang.com/tags/javascript/"/>
    
    <category term="前端框架" scheme="https://blog.rexhang.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    <category term="Vue" scheme="https://blog.rexhang.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>几种判断数组的方法</title>
    <link href="https://blog.rexhang.com/2021/01/10/articles/1/"/>
    <id>https://blog.rexhang.com/2021/01/10/articles/1/</id>
    <published>2021-01-09T16:01:22.000Z</published>
    <updated>2022-08-02T14:05:21.999Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>众所周知，js是门“动态”、“弱类型”编程语言，这意味着在js中可以任性定义变量，同时，“任性”也意味着需常在项目开发中对变量做类型判断，曾几何时，对数组变量的类型判断是件很痛苦的事情，开发人员想出多种方案来对数组做出准确的类型判断，但效果不佳，直到ES5标准“入主中原”，判断数组类型有了标准的isArray()官方利剑，才降伏了数组类型判断这条恶龙，世间得一清，但在此之前开发者是如何判断数组类型的？判断数组类型为何会如此玄学？为何要判断数组类型？带着这些疑问，吾跋山涉水，探寻各方资料，整理消化后遂成此文，以记之。</p><h3 id="二、判断js数组类型为何麻烦？"><a href="#二、判断js数组类型为何麻烦？" class="headerlink" title="二、判断js数组类型为何麻烦？"></a>二、判断js数组类型为何麻烦？</h3><h4 id="1、语言本身的“缺陷”"><a href="#1、语言本身的“缺陷”" class="headerlink" title="1、语言本身的“缺陷”"></a>1、语言本身的“缺陷”</h4><p>js是门“动态”“弱类型”编程语言，这意味着js在定义和使用变量时可以“任性”，在ES6之前，我们定义变量一般使用“var”来定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;jack&#x27;</span>;</span><br><span class="line">name = <span class="number">20</span>;</span><br><span class="line">name = [<span class="string">&#x27;aa&#x27;</span>];</span><br></pre></td></tr></table></figure><p>在上述例子中，name变量初始定义为字符串类型，而后变为数字类型，最后摇身一变成为数组类型，这种任性摇摆的特性就是其“动态”特性，在java中我们定义一个字符串变量须如此定义：String name = ‘jack’，java通过一个String前缀“显式的”、“强制的”指定name变量为字符串类型，之后不得对该name变量进行类型变换(如果执行name = 22将会报type类型转换错误)，但js采用的是弱类型定义方案，在定义变量时使用var声明了一个变量，弱化了类型前缀的限制，并没强制锁死变量类型，之后可以随意更改其类型。动态弱类型这种声明变量的方案用起来可以随性而为，无须顾虑太多，随性的代码书写如若不加管制必将招致灾难性的代码bug。</p><h4 id="2、js类型判断的“不足”"><a href="#2、js类型判断的“不足”" class="headerlink" title="2、js类型判断的“不足”"></a>2、js类型判断的“不足”</h4><p>其实动态弱类型的语言特性并不是决定js判断数组类型麻烦的必然原因，js语言因为历史原因，其创造者在开发之初将其定位为简单的网页小助手语言，为了轻巧、快速的完成小任务开发选择了“动态弱类型”的语言方案，PHP亦为动态弱类型语言，但在处理类型判断时，PHP用一个<code>gettype()</code>方法可以轻松、精准的搞定(<strong>PHP作为世界上世界上最好的语言还是有点东西的</strong>🤣)，PHP有<code>gettype()</code>这枚银弹，js有吗，嗯，算有吧，js最常用的是用<code>typeof</code>操作符来获取数据类型，看<code>typeof</code>这个名字是不是感觉很厉害？感觉会跟PHP一样轻松简单？但随后你会发现：<code>typeof</code>操作符是个很局限的类型获取方案，用它对基本数据类型做判断还算过得去，但在涉及到引用类型判断这种细活时就显得很low了…</p><h3 id="三、判断js数组类型的几个“方案”"><a href="#三、判断js数组类型的几个“方案”" class="headerlink" title="三、判断js数组类型的几个“方案”"></a>三、判断js数组类型的几个“方案”</h3><h3 id="1-typeof-❌"><a href="#1-typeof-❌" class="headerlink" title="1.typeof ❌"></a>1.<del><code>typeof</code></del> ❌</h3><blockquote><p>typeof在判断基础数据类型时尚有问题，更别说用来判断子孙繁多的引用类型了，typeof在判断引用类型时一刀切的统统返回object, 如</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> obj; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> arr; <span class="comment">// object</span></span><br><span class="line"><span class="keyword">typeof</span> map; <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p>故此，不适应于判断数据，<strong>PASS</strong></p><h3 id="2-data-instanceof-Array-❌"><a href="#2-data-instanceof-Array-❌" class="headerlink" title="2.data instanceof Array ❌"></a>2.<del><code>data instanceof Array</code></del> ❌</h3><blockquote><p>instanceof是js用来判断继承关系的运算符（js基于原型链实现继承，故instanceof判断的就是对应的类是否存在于变量的原型链上），根据这个特性可以如此来判断数组类型：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>控制台打印显示如下:</p><p><img src="/images/blog/2021-01-10/1.png" alt="效果图显示失败" title="运行效果如图"></p><p>从打印的结果可以看到Array存在于数组[1, 2, 3]的原型链上，故[1, 2, 3] instanceof Array === true; 利用instanceof的这个特性可以判断数组类型，但是instanceof运算符有个弊端 就是<code>arr instanceof Object</code>也是返回<code>true</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr2 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>控制台打印显示如下:</p><p><img src="/images/blog/2021-01-10/2.png" alt="效果图显示失败" title="运行效果如图"></p><p>故此，不适应于判断数据，<strong>PASS</strong></p><h3 id="3-constructor-✔"><a href="#3-constructor-✔" class="headerlink" title="3.constructor ✔"></a>3.<code>constructor</code> ✔</h3><blockquote><p>在<strong>JavaScript</strong>中, <code>constructor</code>属性会返回对象的构造函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.constructor === <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.constructor === <span class="built_in">Object</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>控制台打印显示如下:</p><p><img src="/images/blog/2021-01-10/3.png" alt="效果图显示失败" title="运行效果如图"></p><p>从打印结果显示，是满足我们的数据类型判断的，并且没有出现第二种判断方式<code>instanceof</code>方法的问题，<strong>因此是可以采用的</strong>。</p><h3 id="4-Object-prototype-toString-✔"><a href="#4-Object-prototype-toString-✔" class="headerlink" title="4.Object.prototype.toString() ✔"></a>4.<code>Object.prototype.toString()</code> ✔</h3><blockquote><p>Object.prototype.toString()能获取到变量的“类目名”，在js中万物皆为对象，万物皆有“类目名”，每个变量、对象、数组等都有一个唯一的类目名（这个类目名类似于人类给各类动植物起的“学名”），该方案通过获取目标变量的类目名([object Array])进行判断，如果类目名一致则证明目标变量为数组类型：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log( <span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">&#x27;[object Array]&#x27;</span> ); <span class="comment">// [object Array]: string; 返回 true</span></span><br></pre></td></tr></table></figure><p>Tips: 这种方法获取各种类型数据都有与之对应的字符串匹配值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]); <span class="comment">// &quot;[object Array]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">&#x27;&#x27;</span>); <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>); <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;&#125;); <span class="comment">// &quot;[object Function]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(); <span class="comment">// &quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>); <span class="comment">// &quot;[object Null]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">document</span>); <span class="comment">// &quot;[object HTMLDocument]&quot;</span></span><br></pre></td></tr></table></figure><p>从打印结果显示，是满足我们的数据类型判断的，<strong>因此是可以采用的</strong>。</p><h3 id="5-Array-isArray-✔"><a href="#5-Array-isArray-✔" class="headerlink" title="5.Array.isArray() ✔"></a>5.<code>Array.isArray()</code> ✔</h3><blockquote><p>该方法是ES5标准规定的判断数组类型的标准方法，虽然Object.prototype.toString()方法可用来判断数组类型，但未免显得有点hack，又因自家typeof类型操作符给予厚望，辱没众望，如果随便更改typeof的返回结果势必会导致天下大乱，instanceof运算符又存在不同frame的局限性难堪大任，ES5不得不亡羊补牢的设计了isArray()方法来“增量”的解决数组判断难题。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123;&#125;); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>从打印结果显示，是满足我们的数据类型判断的，<strong>因此是可以采用的</strong>。</p><h3 id="四、为何要判断数组类型？"><a href="#四、为何要判断数组类型？" class="headerlink" title="四、为何要判断数组类型？"></a>四、为何要判断数组类型？</h3><p>前面说过js属于动态弱类型语言，可能某个变量用着用着就莫名其妙的变了类型（自己不小心更改类型，引入的第三方代码库，因为同名变量改变了类型），如果你设想的是某个变量为数组类型，但因某个逻辑变成了基本类型，这时如果调用数组的方法注定会报错，凡此种种导致的问题，数不胜数，具体的问题实践多了懂得就懂。</p><h3 id="五、结语"><a href="#五、结语" class="headerlink" title="五、结语"></a>五、结语</h3><p>近几年前端项目愈发复杂庞大，为更好的构建高性能的前端项目，诞生了“react、angular、vue”等数据驱动型解决方案，大量的数据、大量的组件和类对数据类型的判断需求愈发频繁，但因为js动态弱类型语言特性，加之其类型判断的坑爹性，所以各路开发者希望完善和升级js，在ES6标准中，新的const变量定义方案能很好的应对变量动态性问题，微软开发的“typescript”能够实现强类型变量定义，可应对弱类型定义问题。这些方案极大的减少了早期js变量任性定义带来的各种问题，虽然判断数组类型在未来开发中可能会成为历史云烟，但理解其相关的基础和历史演变却是一件很【浪漫】的事情，因为在理解了它的相关坑爹性和进化史有助于我们更好的思考和优化。爱之深，责之切，希望js能在未来变得更加锋利可靠，也希望少为一些坑爹特性而想出一些hack方案(额，比如——&gt;Object.prototype.toString()方法)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h3&gt;&lt;p&gt;众所周知，js是门“动态”、“弱类型”编程语言，这意味着在js中可以任性定义变量，同时，“任性”也意味着需常在项目开发中对变</summary>
      
    
    
    
    <category term="大前端" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试经" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E7%BB%8F/"/>
    
    
    <category term="javascript" scheme="https://blog.rexhang.com/tags/javascript/"/>
    
    <category term="javascript数组" scheme="https://blog.rexhang.com/tags/javascript%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>javascript函数防抖与节流</title>
    <link href="https://blog.rexhang.com/2021/01/05/articles/2/"/>
    <id>https://blog.rexhang.com/2021/01/05/articles/2/</id>
    <published>2021-01-04T18:03:33.000Z</published>
    <updated>2022-08-02T14:05:21.999Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念和例子"><a href="#概念和例子" class="headerlink" title="概念和例子"></a>概念和例子</h3><h4 id="函数防抖-debounce"><a href="#函数防抖-debounce" class="headerlink" title="函数防抖(debounce)"></a>函数防抖(debounce)</h4><blockquote><p>在事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟一段ajax请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;ajax request &#x27;</span> + content)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inputa = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;unDebounce&#x27;</span>)</span><br><span class="line"></span><br><span class="line">inputa.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    ajax(e.target.value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行效果如图:</p><p><img src="/images/blog/2021-01-05/165a252be5c94d6b.gif" alt="效果图显示失败" title="运行效果如图"></p><p>可以看到，我们只要按下键盘，就会触发这次ajax请求。不仅从资源上来说是很浪费的行为，而且实际应用中，用户也是输出完整的字符后，才会请求。下面我们优化一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟一段ajax请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;ajax request &#x27;</span> + content)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fun, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">let</span> _args = args</span><br><span class="line">        <span class="built_in">clearTimeout</span>(fun.id)</span><br><span class="line">        fun.id = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            fun.call(that, _args)</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">let</span> inputb = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;debounce&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> debounceAjax = debounce(ajax, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">inputb.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    debounceAjax(e.target.value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>运行效果如图:</p><p><img src="/images/blog/2021-01-05/165a252b4b429b56.gif" alt="效果图显示失败" title="运行效果如图"></p><p>可以看到，我们加入了防抖以后，当你在频繁的输入时，并不会发送请求，只有当你在指定间隔内没有输入时，才会执行函数。如果停止输入但是在指定间隔内又输入，会重新触发计时。</p><blockquote><p>个人理解 函数防抖就是法师发技能的时候要读条，技能读条没完再按技能就会重新读条。</p></blockquote><h4 id="函数节流-throttle"><a href="#函数节流-throttle" class="headerlink" title="函数节流(throttle)"></a>函数节流(throttle)</h4><blockquote><p>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</p></blockquote><p>看代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fun, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> last, deferTimer</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="built_in">this</span></span><br><span class="line">        <span class="keyword">let</span> _args = <span class="built_in">arguments</span></span><br><span class="line">        <span class="keyword">let</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        <span class="keyword">if</span> (last &amp;&amp; now &lt; last + delay) &#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(deferTimer)</span><br><span class="line">            deferTimer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                last = now</span><br><span class="line">                fun.apply(that, _args)</span><br><span class="line">            &#125;, delay)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            last = now</span><br><span class="line">            fun.apply(that,_args)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> throttleAjax = throttle(ajax, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inputc = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;throttle&#x27;</span>)</span><br><span class="line">inputc.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    throttleAjax(e.target.value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>看一下运行结果:</p><p><img src="/images/blog/2021-01-05/165a252b4c1a9686.gif" alt="效果图显示失败" title="运行效果如图"></p><p>可以看到，我们在不断输入时，ajax会按照我们设定的时间，每1s执行一次。</p><blockquote><p>个人理解 函数节流就是fps游戏的射速，就算一直按着鼠标射击，也只会在规定射速内射出子弹。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>函数防抖和函数节流都是防止某一时间频繁触发，但是这两兄弟之间的原理却不一样。</li><li>函数防抖是某一段时间内只执行一次，而函数节流是间隔时间执行。</li></ul><h4 id="结合应用场景"><a href="#结合应用场景" class="headerlink" title="结合应用场景"></a>结合应用场景</h4><ul><li>防抖(debounce)<ul><li>search搜索联想，用户在不断输入值时，用防抖来节约请求资源。</li><li>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次</li></ul></li><li>节流（throttle）<ul><li>鼠标不断点击触发，mousedown(单位时间内只触发一次)</li><li>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概念和例子&quot;&gt;&lt;a href=&quot;#概念和例子&quot; class=&quot;headerlink&quot; title=&quot;概念和例子&quot;&gt;&lt;/a&gt;概念和例子&lt;/h3&gt;&lt;h4 id=&quot;函数防抖-debounce&quot;&gt;&lt;a href=&quot;#函数防抖-debounce&quot; class=&quot;header</summary>
      
    
    
    
    <category term="大前端" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试经" scheme="https://blog.rexhang.com/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E7%BB%8F/"/>
    
    
    <category term="javascript" scheme="https://blog.rexhang.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>如何创建一个TC的免费托管服务</title>
    <link href="https://blog.rexhang.com/2021/01/05/articles/1/"/>
    <id>https://blog.rexhang.com/2021/01/05/articles/1/</id>
    <published>2021-01-04T17:06:21.000Z</published>
    <updated>2022-08-02T14:05:21.999Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;需要先全局安装cli, 本地预先安装好nodejs以及git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g @cloudbase/cli hexo-cli</span><br></pre></td></tr></table></figure><h3 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;初始化一个hexo项目目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>初始化完毕后, 启动服务本地编写文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;发布就很简单了，获取授权，生成静态代码，使用cli推送到远程托管</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cloudbase login</span><br><span class="line">$ hexo g</span><br><span class="line">$ cloudbase hosting deploy public -e [EnvID]</span><br></pre></td></tr></table></figure><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><ul><li>环境ID(EnvID)获取方法: <a href="https://console.cloud.tencent.com/tcb/env/index?rid=4&tdl_anchor=qcloud&tdl_site=free">链接</a></li><li>创建环境指引: <a href="https://cloud.tencent.com/document/product/876/47006">链接</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;首先&quot;&gt;&lt;a href=&quot;#首先&quot; class=&quot;headerlink&quot; title=&quot;首先&quot;&gt;&lt;/a&gt;首先&lt;/h3&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;需要先全局安装cli, 本地预先安装好nodejs以及git&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="腾讯云" scheme="https://blog.rexhang.com/categories/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
    <category term="操作技巧" scheme="https://blog.rexhang.com/categories/%E8%85%BE%E8%AE%AF%E4%BA%91/%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="腾讯云" scheme="https://blog.rexhang.com/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
  </entry>
  
</feed>
