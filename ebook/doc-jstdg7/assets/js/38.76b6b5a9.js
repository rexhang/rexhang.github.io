(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{353:function(e,t,a){"use strict";a.r(t);var r=a(25),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"chapter-7-arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chapter-7-arrays"}},[e._v("#")]),e._v(" Chapter 7. Arrays")]),e._v(" "),a("p",[e._v("This chapter documents arrays, a fundamental datatype in JavaScript and in most other programming languages. An array is an ordered collection of values. Each value is called an element, and each element has a numeric position in the array, known as its index. JavaScript arrays are untyped: an array element may be of any type, and different elements of the same array may be of different types. Array elements may even be objects or other arrays, which allows you to create complex data structures, such as arrays of objects and arrays of arrays. JavaScript arrays are zero-based and use 32-bit indexes: the index of the first element is 0, and the highest possible index is 4294967294 (232−2), for a maximum array size of 4,294,967,295 elements. JavaScript arrays are dynamic: they grow or shrink as needed, and there is no need to declare a fixed size for the array when you create it or to reallocate it when the size changes. JavaScript arrays may be sparse: the elements need not have contiguous indexes, and there may be gaps. Every JavaScript array has a length property. For nonsparse arrays, this property specifies the number of elements in the array. For sparse arrays, length is larger than the highest index of any element.")]),e._v(" "),a("p",[e._v("JavaScript arrays are a specialized form of JavaScript object, and array indexes are really little more than property names that happen to be integers. We’ll talk more about the specializations of arrays elsewhere in this chapter. Implementations typically optimize arrays so that access to numerically indexed array elements is generally significantly faster than access to regular object properties.")]),e._v(" "),a("p",[e._v("Arrays inherit properties from Array.prototype, which defines a rich set of array manipulation methods, covered in §7.8. Most of these methods are generic, which means that they work correctly not only for true arrays, but for any “array-like object.” We’ll discuss array-like objects in §7.9. Finally, JavaScript strings behave like arrays of characters, and we’ll discuss this in §7.10.")]),e._v(" "),a("p",[e._v("ES6 introduces a set of new array classes known collectively as “typed arrays.” Unlike regular JavaScript arrays, typed arrays have a fixed length and a fixed numeric element type. They offer high performance and byte-level access to binary data and are covered in §11.2.")]),e._v(" "),a("h2",{attrs:{id:"_7-1-creating-arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-creating-arrays"}},[e._v("#")]),e._v(" 7.1 Creating Arrays")]),e._v(" "),a("p",[e._v("There are several ways to create arrays. The subsections that follow explain how to create arrays with:")]),e._v(" "),a("p",[e._v("Array literals")]),e._v(" "),a("p",[e._v("The ... spread operator on an iterable object")]),e._v(" "),a("p",[e._v("The Array() constructor")]),e._v(" "),a("p",[e._v("The Array.of() and Array.from() factory methods")]),e._v(" "),a("h3",{attrs:{id:"_7-1-1-array-literals"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-1-array-literals"}},[e._v("#")]),e._v(" 7.1.1 Array Literals")]),e._v(" "),a("p",[e._v("By far the simplest way to create an array is with an array literal, which is simply a comma-separated list of array elements within square brackets. For example:")]),e._v(" "),a("p",[e._v('let empty = [];                 // An array with no elements\nlet primes = [2, 3, 5, 7, 11];  // An array with 5 numeric elements\nlet misc = [ 1.1, true, "a", ]; // 3 elements of various types + trailing comma\nThe values in an array literal need not be constants; they may be arbitrary expressions:')]),e._v(" "),a("p",[e._v("let base = 1024;\nlet table = [base, base+1, base+2, base+3];\nArray literals can contain object literals or other array literals:")]),e._v(" "),a("p",[e._v("let b = [[1, {x: 1, y: 2}], [2, {x: 3, y: 4}]];\nIf an array literal contains multiple commas in a row, with no value between, the array is sparse (see §7.3). Array elements for which values are omitted do not exist but appear to be undefined if you query them:")]),e._v(" "),a("p",[e._v("let count = [1,,3]; // Elements at indexes 0 and 2. No element at index 1\nlet undefs = [,,];  // An array with no elements but a length of 2\nArray literal syntax allows an optional trailing comma, so [,,] has a length of 2, not 3.")]),e._v(" "),a("h3",{attrs:{id:"_7-1-2-the-spread-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-2-the-spread-operator"}},[e._v("#")]),e._v(" 7.1.2 The Spread Operator")]),e._v(" "),a("p",[e._v("In ES6 and later, you can use the “spread operator,” ..., to include the elements of one array within an array literal:")]),e._v(" "),a("p",[e._v("let a = [1, 2, 3];\nlet b = [0, ...a, 4];  // b == [0, 1, 2, 3, 4]\nThe three dots “spread” the array a so that its elements become elements within the array literal that is being created. It is as if the ...a was replaced by the elements of the array a, listed literally as part of the enclosing array literal. (Note that, although we call these three dots a spread operator, this is not a true operator because it can only be used in array literals and, as we’ll see later in the book, function invocations.)")]),e._v(" "),a("p",[e._v("The spread operator is a convenient way to create a (shallow) copy of an array:")]),e._v(" "),a("p",[e._v("let original = [1,2,3];\nlet copy = [...original];\ncopy[0] = 0;  // Modifying the copy does not change the original\noriginal[0]   // => 1\nThe spread operator works on any iterable object. (Iterable objects are what the for/of loop iterates over; we first saw them in §5.4.4, and we’ll see much more about them in Chapter 12.) Strings are iterable, so you can use a spread operator to turn any string into an array of single-character strings:")]),e._v(" "),a("p",[e._v('let digits = [..."0123456789ABCDEF"];\ndigits // => ["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"]\nSet objects (§11.1.1) are iterable, so an easy way to remove duplicate elements from an array is to convert the array to a set and then immediately convert the set back to an array using the spread operator:')]),e._v(" "),a("p",[e._v('let letters = [..."hello world"];\n[...new Set(letters)]  // => ["h","e","l","o"," ","w","r","d"]')]),e._v(" "),a("h3",{attrs:{id:"_7-1-3-the-array-constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-3-the-array-constructor"}},[e._v("#")]),e._v(" 7.1.3 The Array() Constructor")]),e._v(" "),a("p",[e._v("Another way to create an array is with the Array() constructor. You can invoke this constructor in three distinct ways:")]),e._v(" "),a("p",[e._v("Call it with no arguments:")]),e._v(" "),a("p",[e._v("let a = new Array();\nThis method creates an empty array with no elements and is equivalent to the array literal [].")]),e._v(" "),a("p",[e._v("Call it with a single numeric argument, which specifies a length:")]),e._v(" "),a("p",[e._v("let a = new Array(10);\nThis technique creates an array with the specified length. This form of the Array() constructor can be used to preallocate an array when you know in advance how many elements will be required. Note that no values are stored in the array, and the array index properties “0”, “1”, and so on are not even defined for the array.")]),e._v(" "),a("p",[e._v("Explicitly specify two or more array elements or a single non-numeric element for the array:")]),e._v(" "),a("p",[e._v('let a = new Array(5, 4, 3, 2, 1, "testing, testing");\nIn this form, the constructor arguments become the elements of the new array. Using an array literal is almost always simpler than this usage of the Array() constructor.')]),e._v(" "),a("h3",{attrs:{id:"_7-1-4-array-of"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-4-array-of"}},[e._v("#")]),e._v(" 7.1.4 Array.of()")]),e._v(" "),a("p",[e._v("When the Array() constructor function is invoked with one numeric argument, it uses that argument as an array length. But when invoked with more than one numeric argument, it treats those arguments as elements for the array to be created. This means that the Array() constructor cannot be used to create an array with a single numeric element.")]),e._v(" "),a("p",[e._v("In ES6, the Array.of() function addresses this problem: it is a factory method that creates and returns a new array, using its argument values (regardless of how many of them there are) as the array elements:")]),e._v(" "),a("p",[e._v("Array.of()        // => []; returns empty array with no arguments\nArray.of(10)      // => [10]; can create arrays with a single numeric argument\nArray.of(1,2,3)   // => [1, 2, 3]")]),e._v(" "),a("h3",{attrs:{id:"_7-1-5-array-from"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-5-array-from"}},[e._v("#")]),e._v(" 7.1.5 Array.from()")]),e._v(" "),a("p",[e._v("Array.from is another array factory method introduced in ES6. It expects an iterable or array-like object as its first argument and returns a new array that contains the elements of that object. With an iterable argument, Array.from(iterable) works like the spread operator [...iterable] does. It is also a simple way to make a copy of an array:")]),e._v(" "),a("p",[e._v("let copy = Array.from(original);\nArray.from() is also important because it defines a way to make a true-array copy of an array-like object. Array-like objects are non-array objects that have a numeric length property and have values stored with properties whose names happen to be integers. When working with client-side JavaScript, the return values of some web browser methods are array-like, and it can be easier to work with them if you first convert them to true arrays:")]),e._v(" "),a("p",[e._v("let truearray = Array.from(arraylike);\nArray.from() also accepts an optional second argument. If you pass a function as the second argument, then as the new array is being built, each element from the source object will be passed to the function you specify, and the return value of the function will be stored in the array instead of the original value. (This is very much like the array map() method that will be introduced later in the chapter, but it is more efficient to perform the mapping while the array is being built than it is to build the array and then map it to another new array.)")]),e._v(" "),a("h2",{attrs:{id:"_7-2-reading-and-writing-array-elements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-reading-and-writing-array-elements"}},[e._v("#")]),e._v(" 7.2 Reading and Writing Array Elements")]),e._v(" "),a("p",[e._v("You access an element of an array using the [] operator. A reference to the array should appear to the left of the brackets. An arbitrary expression that has a non-negative integer value should be inside the brackets. You can use this syntax to both read and write the value of an element of an array. Thus, the following are all legal JavaScript statements:")]),e._v(" "),a("p",[e._v('let a = ["world"];     // Start with a one-element array\nlet value = a[0];      // Read element 0\na[1] = 3.14;           // Write element 1\nlet i = 2;\na[i] = 3;              // Write element 2\na[i + 1] = "hello";    // Write element 3\na[a[i]] = a[0];        // Read elements 0 and 2, write element 3\nWhat is special about arrays is that when you use property names that are non-negative integers less than 232–1, the array automatically maintains the value of the length property for you. In the preceding, for example, we created an array a with a single element. We then assigned values at indexes 1, 2, and 3. The length property of the array changed as we did, so:')]),e._v(" "),a("p",[e._v('a.length       // => 4\nRemember that arrays are a specialized kind of object. The square brackets used to access array elements work just like the square brackets used to access object properties. JavaScript converts the numeric array index you specify to a string—the index 1 becomes the string "1"—then uses that string as a property name. There is nothing special about the conversion of the index from a number to a string: you can do that with regular objects, too:')]),e._v(" "),a("p",[e._v('let o = {};    // Create a plain object\no[1] = "one";  // Index it with an integer\no["1"]         // => "one"; numeric and string property names are the same\nIt is helpful to clearly distinguish an array index from an object property name. All indexes are property names, but only property names that are integers between 0 and 232–2 are indexes. All arrays are objects, and you can create properties of any name on them. If you use properties that are array indexes, however, arrays have the special behavior of updating their length property as needed.')]),e._v(" "),a("p",[e._v("Note that you can index an array using numbers that are negative or that are not integers. When you do this, the number is converted to a string, and that string is used as the property name. Since the name is not a non-negative integer, it is treated as a regular object property, not an array index. Also, if you index an array with a string that happens to be a non-negative integer, it behaves as an array index, not an object property. The same is true if you use a floating-point number that is the same as an integer:")]),e._v(" "),a("p",[e._v('a[-1.23] = true;  // This creates a property named "-1.23"\na["1000"] = 0;    // This the 1001st element of the array\na[1.000] = 1;     // Array index 1. Same as a[1] = 1;\nThe fact that array indexes are simply a special type of object property name means that JavaScript arrays have no notion of an “out of bounds” error. When you try to query a nonexistent property of any object, you don’t get an error; you simply get undefined. This is just as true for arrays as it is for objects:')]),e._v(" "),a("p",[e._v("let a = [true, false]; // This array has elements at indexes 0 and 1\na[2]                   // => undefined; no element at this index.\na[-1]                  // => undefined; no property with this name.")]),e._v(" "),a("h2",{attrs:{id:"_7-3-sparse-arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-sparse-arrays"}},[e._v("#")]),e._v(" 7.3 Sparse Arrays")]),e._v(" "),a("p",[e._v("A sparse array is one in which the elements do not have contiguous indexes starting at 0. Normally, the length property of an array specifies the number of elements in the array. If the array is sparse, the value of the length property is greater than the number of elements. Sparse arrays can be created with the Array() constructor or simply by assigning to an array index larger than the current array length.")]),e._v(" "),a("p",[e._v("let a = new Array(5); // No elements, but a.length is 5.\na = [];               // Create an array with no elements and length = 0.\na[1000] = 0;          // Assignment adds one element but sets length to 1001.\nWe’ll see later that you can also make an array sparse with the delete operator.")]),e._v(" "),a("p",[e._v("Arrays that are sufficiently sparse are typically implemented in a slower, more memory-efficient way than dense arrays are, and looking up elements in such an array will take about as much time as regular object property lookup.")]),e._v(" "),a("p",[e._v("Note that when you omit a value in an array literal (using repeated commas as in [1,,3]), the resulting array is sparse, and the omitted elements simply do not exist:")]),e._v(" "),a("p",[e._v("let a1 = [,];           // This array has no elements and length 1\nlet a2 = [undefined];   // This array has one undefined element\n0 in a1                 // => false: a1 has no element with index 0\n0 in a2                 // => true: a2 has the undefined value at index 0\nUnderstanding sparse arrays is an important part of understanding the true nature of JavaScript arrays. In practice, however, most JavaScript arrays you will work with will not be sparse. And, if you do have to work with a sparse array, your code will probably treat it just as it would treat a nonsparse array with undefined elements.")]),e._v(" "),a("h2",{attrs:{id:"_7-4-array-length"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-array-length"}},[e._v("#")]),e._v(" 7.4 Array Length")]),e._v(" "),a("p",[e._v("Every array has a length property, and it is this property that makes arrays different from regular JavaScript objects. For arrays that are dense (i.e., not sparse), the length property specifies the number of elements in the array. Its value is one more than the highest index in the array:")]),e._v(" "),a("p",[e._v('[].length             // => 0: the array has no elements\n["a","b","c"].length  // => 3: highest index is 2, length is 3\nWhen an array is sparse, the length property is greater than the number of elements, and all we can say about it is that length is guaranteed to be larger than the index of every element in the array. Or, put another way, an array (sparse or not) will never have an element whose index is greater than or equal to its length. In order to maintain this invariant, arrays have two special behaviors. The first we described above: if you assign a value to an array element whose index i is greater than or equal to the array’s current length, the value of the length property is set to i+1.')]),e._v(" "),a("p",[e._v("The second special behavior that arrays implement in order to maintain the length invariant is that, if you set the length property to a non-negative integer n smaller than its current value, any array elements whose index is greater than or equal to n are deleted from the array:")]),e._v(" "),a("p",[e._v("a = [1,2,3,4,5];     // Start with a 5-element array.\na.length = 3;        // a is now [1,2,3].\na.length = 0;        // Delete all elements.  a is [].\na.length = 5;        // Length is 5, but no elements, like new Array(5)\nYou can also set the length property of an array to a value larger than its current value. Doing this does not actually add any new elements to the array; it simply creates a sparse area at the end of the array.")]),e._v(" "),a("h2",{attrs:{id:"_7-5-adding-and-deleting-array-elements"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-adding-and-deleting-array-elements"}},[e._v("#")]),e._v(" 7.5 Adding and Deleting Array Elements")]),e._v(" "),a("p",[e._v("We’ve already seen the simplest way to add elements to an array: just assign values to new indexes:")]),e._v(" "),a("p",[e._v('let a = [];      // Start with an empty array.\na[0] = "zero";   // And add elements to it.\na[1] = "one";\nYou can also use the push() method to add one or more values to the end of an array:')]),e._v(" "),a("p",[e._v('let a = [];           // Start with an empty array\na.push("zero");       // Add a value at the end.  a = ["zero"]\na.push("one", "two"); // Add two more values.  a = ["zero", "one", "two"]\nPushing a value onto an array a is the same as assigning the value to a[a.length]. You can use the unshift() method (described in §7.8) to insert a value at the beginning of an array, shifting the existing array elements to higher indexes. The pop() method is the opposite of push(): it removes the last element of the array and returns it, reducing the length of an array by 1. Similarly, the shift() method removes and returns the first element of the array, reducing the length by 1 and shifting all elements down to an index one lower than their current index. See §7.8 for more on these methods.')]),e._v(" "),a("p",[e._v("You can delete array elements with the delete operator, just as you can delete object properties:")]),e._v(" "),a("p",[e._v("let a = [1,2,3];\ndelete a[2];   // a now has no element at index 2\n2 in a         // => false: no array index 2 is defined\na.length       // => 3: delete does not affect array length\nDeleting an array element is similar to (but subtly different than) assigning undefined to that element. Note that using delete on an array element does not alter the length property and does not shift elements with higher indexes down to fill in the gap that is left by the deleted property. If you delete an element from an array, the array becomes sparse.")]),e._v(" "),a("p",[e._v("As we saw above, you can also remove elements from the end of an array simply by setting the length property to the new desired length.")]),e._v(" "),a("p",[e._v("Finally, splice() is the general-purpose method for inserting, deleting, or replacing array elements. It alters the length property and shifts array elements to higher or lower indexes as needed. See §7.8 for details.")]),e._v(" "),a("h2",{attrs:{id:"_7-6-iterating-arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-iterating-arrays"}},[e._v("#")]),e._v(" 7.6 Iterating Arrays")]),e._v(" "),a("p",[e._v("As of ES6, the easiest way to loop through each of the elements of an array (or any iterable object) is with the for/of loop, which was covered in detail in §5.4.4:")]),e._v(" "),a("p",[e._v('let letters = [..."Hello world"];  // An array of letters\nlet string = "";\nfor(let letter of letters) {\nstring += letter;\n}\nstring  // => "Hello world"; we reassembled the original text\nThe built-in array iterator that the for/of loop uses returns the elements of an array in ascending order. It has no special behavior for sparse arrays and simply returns undefined for any array elements that do not exist.')]),e._v(" "),a("p",[e._v("If you want to use a for/of loop for an array and need to know the index of each array element, use the entries() method of the array, along with destructuring assignment, like this:")]),e._v(" "),a("p",[e._v('let everyother = "";\nfor(let [index, letter] of letters.entries()) {\nif (index % 2 === 0) everyother += letter;  // letters at even indexes\n}\neveryother  // => "Hlowrd"\nAnother good way to iterate arrays is with forEach(). This is not a new form of the for loop, but an array method that offers a functional approach to array iteration. You pass a function to the forEach() method of an array, and forEach() invokes your function once on each element of the array:')]),e._v(" "),a("p",[e._v('let uppercase = "";\nletters.forEach(letter => {  // Note arrow function syntax here\nuppercase += letter.toUpperCase();\n});\nuppercase  // => "HELLO WORLD"\nAs you would expect, forEach() iterates the array in order, and it actually passes the array index to your function as a second argument, which is occasionally useful. Unlike the for/of loop, the forEach() is aware of sparse arrays and does not invoke your function for elements that are not there.')]),e._v(" "),a("p",[e._v("§7.8.1 documents the forEach() method in more detail. That section also covers related methods such as map() and filter() that perform specialized kinds of array iteration.")]),e._v(" "),a("p",[e._v("You can also loop through the elements of an array with a good old-fashioned for loop (§5.4.3):")]),e._v(" "),a("p",[e._v('let vowels = "";\nfor(let i = 0; i < letters.length; i++) { // For each index in the array\nlet letter = letters[i];              // Get the element at that index\nif (/[aeiou]/.test(letter)) {         // Use a regular expression test\nvowels += letter;                 // If it is a vowel, remember it\n}\n}\nvowels  // => "eoo"\nIn nested loops, or other contexts where performance is critical, you may sometimes see this basic array iteration loop written so that the array length is only looked up once rather than on each iteration. Both of the following for loop forms are idiomatic, though not particularly common, and with modern JavaScript interpreters, it is not at all clear that they have any performance impact:')]),e._v(" "),a("p",[e._v("// Save the array length into a local variable\nfor(let i = 0, len = letters.length; i < len; i++) {\n// loop body remains the same\n}")]),e._v(" "),a("p",[e._v("// Iterate backwards from the end of the array to the start\nfor(let i = letters.length-1; i >= 0; i--) {\n// loop body remains the same\n}\nThese examples assume that the array is dense and that all elements contain valid data. If this is not the case, you should test the array elements before using them. If you want to skip undefined and nonexistent elements, you might write:")]),e._v(" "),a("p",[e._v("for(let i = 0; i < a.length; i++) {\nif (a[i] === undefined) continue; // Skip undefined + nonexistent elements\n// loop body here\n}")]),e._v(" "),a("h2",{attrs:{id:"_7-7-multidimensional-arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-multidimensional-arrays"}},[e._v("#")]),e._v(" 7.7 Multidimensional Arrays")]),e._v(" "),a("p",[e._v("JavaScript does not support true multidimensional arrays, but you can approximate them with arrays of arrays. To access a value in an array of arrays, simply use the [] operator twice. For example, suppose the variable matrix is an array of arrays of numbers. Every element in matrix[x] is an array of numbers. To access a particular number within this array, you would write matrix[x][y]. Here is a concrete example that uses a two-dimensional array as a multiplication table:")]),e._v(" "),a("p",[e._v("// Create a multidimensional array\nlet table = new Array(10);               // 10 rows of the table\nfor(let i = 0; i < table.length; i++) {\ntable[i] = new Array(10);            // Each row has 10 columns\n}")]),e._v(" "),a("p",[e._v("// Initialize the array\nfor(let row = 0; row < table.length; row++) {\nfor(let col = 0; col < table[row].length; col++) {\ntable[row][col] = row*col;\n}\n}")]),e._v(" "),a("p",[e._v("// Use the multidimensional array to compute 5*7\ntable[5][7]  // => 35")]),e._v(" "),a("h2",{attrs:{id:"_7-8-array-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-array-methods"}},[e._v("#")]),e._v(" 7.8 Array Methods")]),e._v(" "),a("p",[e._v("The preceding sections have focused on basic JavaScript syntax for working with arrays. In general, though, it is the methods defined by the Array class that are the most powerful. The next sections document these methods. While reading about these methods, keep in mind that some of them modify the array they are called on and some of them leave the array unchanged. A number of the methods return an array: sometimes, this is a new array, and the original is unchanged. Other times, a method will modify the array in place and will also return a reference to the modified array.")]),e._v(" "),a("p",[e._v("Each of the subsections that follows covers a group of related array methods:")]),e._v(" "),a("p",[e._v("Iterator methods loop over the elements of an array, typically invoking a function that you specify on each of those elements.")]),e._v(" "),a("p",[e._v("Stack and queue methods add and remove array elements to and from the beginning and the end of an array.")]),e._v(" "),a("p",[e._v("Subarray methods are for extracting, deleting, inserting, filling, and copying contiguous regions of a larger array.")]),e._v(" "),a("p",[e._v("Searching and sorting methods are for locating elements within an array and for sorting the elements of an array.")]),e._v(" "),a("p",[e._v("The following subsections also cover the static methods of the Array class and a few miscellaneous methods for concatenating arrays and converting arrays to strings.")]),e._v(" "),a("h3",{attrs:{id:"_7-8-1-array-iterator-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-1-array-iterator-methods"}},[e._v("#")]),e._v(" 7.8.1 Array Iterator Methods")]),e._v(" "),a("p",[e._v("The methods described in this section iterate over arrays by passing array elements, in order, to a function you supply, and they provide convenient ways to iterate, map, filter, test, and reduce arrays.")]),e._v(" "),a("p",[e._v("Before we explain the methods in detail, however, it is worth making some generalizations about them. First, all of these methods accept a function as their first argument and invoke that function once for each element (or some elements) of the array. If the array is sparse, the function you pass is not invoked for nonexistent elements. In most cases, the function you supply is invoked with three arguments: the value of the array element, the index of the array element, and the array itself. Often, you only need the first of these argument values and can ignore the second and third values.")]),e._v(" "),a("p",[e._v("Most of the iterator methods described in the following subsections accept an optional second argument. If specified, the function is invoked as if it is a method of this second argument. That is, the second argument you pass becomes the value of the this keyword inside of the function you pass as the first argument. The return value of the function you pass is usually important, but different methods handle the return value in different ways. None of the methods described here modify the array on which they are invoked (though the function you pass can modify the array, of course).")]),e._v(" "),a("p",[e._v("Each of these functions is invoked with a function as its first argument, and it is very common to define that function inline as part of the method invocation expression instead of using an existing function that is defined elsewhere. Arrow function syntax (see §8.1.3) works particularly well with these methods, and we will use it in the examples that follow.")]),e._v(" "),a("p",[e._v("FOREACH()\nThe forEach() method iterates through an array, invoking a function you specify for each element. As we’ve described, you pass the function as the first argument to forEach(). forEach() then invokes your function with three arguments: the value of the array element, the index of the array element, and the array itself. If you only care about the value of the array element, you can write a function with only one parameter—the additional arguments will be ignored:")]),e._v(" "),a("p",[e._v("let data = [1,2,3,4,5], sum = 0;\n// Compute the sum of the elements of the array\ndata.forEach(value => { sum += value; });          // sum == 15")]),e._v(" "),a("p",[e._v("// Now increment each array element\ndata.forEach(function(v, i, a) { a[i] = v + 1; }); // data == [2,3,4,5,6]\nNote that forEach() does not provide a way to terminate iteration before all elements have been passed to the function. That is, there is no equivalent of the break statement you can use with a regular for loop.")]),e._v(" "),a("p",[e._v("MAP()\nThe map() method passes each element of the array on which it is invoked to the function you specify and returns an array containing the values returned by your function. For example:")]),e._v(" "),a("p",[e._v("let a = [1, 2, 3];\na.map(x => x"),a("em",[e._v("x)   // => [1, 4, 9]: the function takes input x and returns x")]),e._v("x\nThe function you pass to map() is invoked in the same way as a function passed to forEach(). For the map() method, however, the function you pass should return a value. Note that map() returns a new array: it does not modify the array it is invoked on. If that array is sparse, your function will not be called for the missing elements, but the returned array will be sparse in the same way as the original array: it will have the same length and the same missing elements.")]),e._v(" "),a("p",[e._v("FILTER()\nThe filter() method returns an array containing a subset of the elements of the array on which it is invoked. The function you pass to it should be predicate: a function that returns true or false. The predicate is invoked just as for forEach() and map(). If the return value is true, or a value that converts to true, then the element passed to the predicate is a member of the subset and is added to the array that will become the return value. Examples:")]),e._v(" "),a("p",[e._v("let a = [5, 4, 3, 2, 1];\na.filter(x => x < 3)         // => [2, 1]; values less than 3\na.filter((x,i) => i%2 === 0) // => [5, 3, 1]; every other value\nNote that filter() skips missing elements in sparse arrays and that its return value is always dense. To close the gaps in a sparse array, you can do this:")]),e._v(" "),a("p",[e._v("let dense = sparse.filter(() => true);\nAnd to close gaps and remove undefined and null elements, you can use filter, like this:")]),e._v(" "),a("p",[e._v("a = a.filter(x => x !== undefined && x !== null);\nFIND() AND FINDINDEX()\nThe find() and findIndex() methods are like filter() in that they iterate through your array looking for elements for which your predicate function returns a truthy value. Unlike filter(), however, these two methods stop iterating the first time the predicate finds an element. When that happens, find() returns the matching element, and findIndex() returns the index of the matching element. If no matching element is found, find() returns undefined and findIndex() returns -1:")]),e._v(" "),a("p",[e._v("let a = [1,2,3,4,5];\na.findIndex(x => x === 3)  // => 2; the value 3 appears at index 2\na.findIndex(x => x < 0)    // => -1; no negative numbers in the array\na.find(x => x % 5 === 0)   // => 5: this is a multiple of 5\na.find(x => x % 7 === 0)   // => undefined: no multiples of 7 in the array\nEVERY() AND SOME()\nThe every() and some() methods are array predicates: they apply a predicate function you specify to the elements of the array, then return true or false.")]),e._v(" "),a("p",[e._v("The every() method is like the mathematical “for all” quantifier ∀: it returns true if and only if your predicate function returns true for all elements in the array:")]),e._v(" "),a("p",[e._v("let a = [1,2,3,4,5];\na.every(x => x < 10)      // => true: all values are < 10.\na.every(x => x % 2 === 0) // => false: not all values are even.\nThe some() method is like the mathematical “there exists” quantifier ∃: it returns true if there exists at least one element in the array for which the predicate returns true and returns false if and only if the predicate returns false for all elements of the array:")]),e._v(" "),a("p",[e._v("let a = [1,2,3,4,5];\na.some(x => x%2===0)  // => true; a has some even numbers.\na.some(isNaN)         // => false; a has no non-numbers.\nNote that both every() and some() stop iterating array elements as soon as they know what value to return. some() returns true the first time your predicate returns "),a("code",[e._v("true")]),e._v(" and only iterates through the entire array if your predicate always returns false. every() is the opposite: it returns false the first time your predicate returns false and only iterates all elements if your predicate always returns true. Note also that, by mathematical convention, every() returns true and some returns false when invoked on an empty array.")]),e._v(" "),a("p",[e._v("REDUCE() AND REDUCERIGHT()\nThe reduce() and reduceRight() methods combine the elements of an array, using the function you specify, to produce a single value. This is a common operation in functional programming and also goes by the names “inject” and “fold.” Examples help illustrate how it works:")]),e._v(" "),a("p",[e._v("let a = [1,2,3,4,5];\na.reduce((x,y) => x+y, 0)          // => 15; the sum of the values\na.reduce((x,y) => x*y, 1)          // => 120; the product of the values\na.reduce((x,y) => (x > y) ? x : y) // => 5; the largest of the values\nreduce() takes two arguments. The first is the function that performs the reduction operation. The task of this reduction function is to somehow combine or reduce two values into a single value and to return that reduced value. In the examples we’ve shown here, the functions combine two values by adding them, multiplying them, and choosing the largest. The second (optional) argument is an initial value to pass to the function.")]),e._v(" "),a("p",[e._v("Functions used with reduce() are different than the functions used with forEach() and map(). The familiar value, index, and array values are passed as the second, third, and fourth arguments. The first argument is the accumulated result of the reduction so far. On the first call to the function, this first argument is the initial value you passed as the second argument to reduce(). On subsequent calls, it is the value returned by the previous invocation of the function. In the first example, the reduction function is first called with arguments 0 and 1. It adds these and returns 1. It is then called again with arguments 1 and 2 and returns 3. Next, it computes 3+3=6, then 6+4=10, and finally 10+5=15. This final value, 15, becomes the return value of reduce().")]),e._v(" "),a("p",[e._v("You may have noticed that the third call to reduce() in this example has only a single argument: there is no initial value specified. When you invoke reduce() like this with no initial value, it uses the first element of the array as the initial value. This means that the first call to the reduction function will have the first and second array elements as its first and second arguments. In the sum and product examples, we could have omitted the initial value argument.")]),e._v(" "),a("p",[e._v("Calling reduce() on an empty array with no initial value argument causes a TypeError. If you call it with only one value—either an array with one element and no initial value or an empty array and an initial value—it simply returns that one value without ever calling the reduction function.")]),e._v(" "),a("p",[e._v("reduceRight() works just like reduce(), except that it processes the array from highest index to lowest (right-to-left), rather than from lowest to highest. You might want to do this if the reduction operation has right-to-left associativity, for example:")]),e._v(" "),a("p",[e._v("// Compute 2^(3^4).  Exponentiation has right-to-left precedence\nlet a = [2, 3, 4];\na.reduceRight((acc,val) => Math.pow(val,acc)) // => 2.4178516392292583e+24\nNote that neither reduce() nor reduceRight() accepts an optional argument that specifies the this value on which the reduction function is to be invoked. The optional initial value argument takes its place. See the Function.bind() method (§8.7.5) if you need your reduction function invoked as a method of a particular object.")]),e._v(" "),a("p",[e._v("The examples shown so far have been numeric for simplicity, but reduce() and reduceRight() are not intended solely for mathematical computations. Any function that can combine two values (such as two objects) into one value of the same type can be used as a reduction function. On the other hand, algorithms expressed using array reductions can quickly become complex and hard to understand, and you may find that it is easier to read, write, and reason about your code if you use regular looping constructs to process your arrays.")]),e._v(" "),a("h3",{attrs:{id:"_7-8-2-flattening-arrays-with-flat-and-flatmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-2-flattening-arrays-with-flat-and-flatmap"}},[e._v("#")]),e._v(" 7.8.2 Flattening arrays with flat() and flatMap()")]),e._v(" "),a("p",[e._v("In ES2019, the flat() method creates and returns a new array that contains the same elements as the array it is called on, except that any elements that are themselves arrays are “flattened” into the returned array. For example:")]),e._v(" "),a("p",[e._v("[1, [2, 3]].flat()    // => [1, 2, 3]\n[1, [2, [3]]].flat()  // => [1, 2, [3]]\nWhen called with no arguments, flat() flattens one level of nesting. Elements of the original array that are themselves arrays are flattened, but array elements of those arrays are not flattened. If you want to flatten more levels, pass a number to flat():")]),e._v(" "),a("p",[e._v("let a = [1, [2, [3, [4]]]];\na.flat(1)   // => [1, 2, [3, [4]]]\na.flat(2)   // => [1, 2, 3, [4]]\na.flat(3)   // => [1, 2, 3, 4]\na.flat(4)   // => [1, 2, 3, 4]\nThe flatMap() method works just like the map() method (see “map()”) except that the returned array is automatically flattened as if passed to flat(). That is, calling a.flatMap(f) is the same as (but more efficient than) a.map(f).flat():")]),e._v(" "),a("p",[e._v('let phrases = ["hello world", "the definitive guide"];\nlet words = phrases.flatMap(phrase => phrase.split(" "));\nwords // => ["hello", "world", "the", "definitive", "guide"];\nYou can think of flatMap() as a generalization of map() that allows each element of the input array to map to any number of elements of the output array. In particular, flatMap() allows you to map input elements to an empty array, which flattens to nothing in the output array:')]),e._v(" "),a("p",[e._v("// Map non-negative numbers to their square roots\n[-2, -1, 1, 2].flatMap(x => x < 0 ? [] : Math.sqrt(x)) // => [1, 2**0.5]")]),e._v(" "),a("h3",{attrs:{id:"_7-8-3-adding-arrays-with-concat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-3-adding-arrays-with-concat"}},[e._v("#")]),e._v(" 7.8.3 Adding arrays with concat()")]),e._v(" "),a("p",[e._v("The concat() method creates and returns a new array that contains the elements of the original array on which concat() was invoked, followed by each of the arguments to concat(). If any of these arguments is itself an array, then it is the array elements that are concatenated, not the array itself. Note, however, that concat() does not recursively flatten arrays of arrays. concat() does not modify the array on which it is invoked:")]),e._v(" "),a("p",[e._v("let a = [1,2,3];\na.concat(4, 5)          // => [1,2,3,4,5]\na.concat([4,5],[6,7])   // => [1,2,3,4,5,6,7]; arrays are flattened\na.concat(4, [5,[6,7]])  // => [1,2,3,4,5,[6,7]]; but not nested arrays\na                       // => [1,2,3]; the original array is unmodified\nNote that concat() makes a new copy of the array it is called on. In many cases, this is the right thing to do, but it is an expensive operation. If you find yourself writing code like a = a.concat(x), then you should think about modifying your array in place with push() or splice() instead of creating a new one.")]),e._v(" "),a("h3",{attrs:{id:"_7-8-4-stacks-and-queues-with-push-pop-shift-and-unshift"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-4-stacks-and-queues-with-push-pop-shift-and-unshift"}},[e._v("#")]),e._v(" 7.8.4 Stacks and Queues with push(), pop(), shift(), and unshift()")]),e._v(" "),a("p",[e._v("The push() and pop() methods allow you to work with arrays as if they were stacks. The push() method appends one or more new elements to the end of an array and returns the new length of the array. Unlike concat(), push() does not flatten array arguments. The pop() method does the reverse: it deletes the last element of an array, decrements the array length, and returns the value that it removed. Note that both methods modify the array in place. The combination of push() and pop() allows you to use a JavaScript array to implement a first-in, last-out stack. For example:")]),e._v(" "),a("p",[e._v("let stack = [];       // stack == []\nstack.push(1,2);      // stack == [1,2];\nstack.pop();          // stack == [1]; returns 2\nstack.push(3);        // stack == [1,3]\nstack.pop();          // stack == [1]; returns 3\nstack.push([4,5]);    // stack == [1,[4,5]]\nstack.pop()           // stack == [1]; returns [4,5]\nstack.pop();          // stack == []; returns 1\nThe push() method does not flatten an array you pass to it, but if you want to push all of the elements from one array onto another array, you can use the spread operator (§8.3.4) to flatten it explicitly:")]),e._v(" "),a("p",[e._v("a.push(...values);\nThe unshift() and shift() methods behave much like push() and pop(), except that they insert and remove elements from the beginning of an array rather than from the end. unshift() adds an element or elements to the beginning of the array, shifts the existing array elements up to higher indexes to make room, and returns the new length of the array. shift() removes and returns the first element of the array, shifting all subsequent elements down one place to occupy the newly vacant space at the start of the array. You could use unshift() and shift() to implement a stack, but it would be less efficient than using push() and pop() because the array elements need to be shifted up or down every time an element is added or removed at the start of the array. Instead, though, you can implement a queue data structure by using push() to add elements at the end of an array and shift() to remove them from the start of the array:")]),e._v(" "),a("p",[e._v("let q = [];            // q == []\nq.push(1,2);           // q == [1,2]\nq.shift();             // q == [2]; returns 1\nq.push(3)              // q == [2, 3]\nq.shift()              // q == [3]; returns 2\nq.shift()              // q == []; returns 3\nThere is one feature of unshift() that is worth calling out because you may find it surprising. When passing multiple arguments to unshift(), they are inserted all at once, which means that they end up in the array in a different order than they would be if you inserted them one at a time:")]),e._v(" "),a("p",[e._v("let a = [];            // a == []\na.unshift(1)           // a == [1]\na.unshift(2)           // a == [2, 1]\na = [];                // a == []\na.unshift(1,2)         // a == [1, 2]")]),e._v(" "),a("h3",{attrs:{id:"_7-8-5-subarrays-with-slice-splice-fill-and-copywithin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-5-subarrays-with-slice-splice-fill-and-copywithin"}},[e._v("#")]),e._v(" 7.8.5 Subarrays with slice(), splice(), fill(), and copyWithin()")]),e._v(" "),a("p",[e._v("Arrays define a number of methods that work on contiguous regions, or subarrays or “slices” of an array. The following sections describe methods for extracting, replacing, filling, and copying slices.")]),e._v(" "),a("p",[e._v("SLICE()\nThe slice() method returns a slice, or subarray, of the specified array. Its two arguments specify the start and end of the slice to be returned. The returned array contains the element specified by the first argument and all subsequent elements up to, but not including, the element specified by the second argument. If only one argument is specified, the returned array contains all elements from the start position to the end of the array. If either argument is negative, it specifies an array element relative to the length of the array. An argument of –1, for example, specifies the last element in the array, and an argument of –2 specifies the element before that one. Note that slice() does not modify the array on which it is invoked. Here are some examples:")]),e._v(" "),a("p",[e._v("let a = [1,2,3,4,5];\na.slice(0,3);    // Returns [1,2,3]\na.slice(3);      // Returns [4,5]\na.slice(1,-1);   // Returns [2,3,4]\na.slice(-3,-2);  // Returns [3]\nSPLICE()\nsplice() is a general-purpose method for inserting or removing elements from an array. Unlike slice() and concat(), splice() modifies the array on which it is invoked. Note that splice() and slice() have very similar names but perform substantially different operations.")]),e._v(" "),a("p",[e._v("splice() can delete elements from an array, insert new elements into an array, or perform both operations at the same time. Elements of the array that come after the insertion or deletion point have their indexes increased or decreased as necessary so that they remain contiguous with the rest of the array. The first argument to splice() specifies the array position at which the insertion and/or deletion is to begin. The second argument specifies the number of elements that should be deleted from (spliced out of) the array. (Note that this is another difference between these two methods. The second argument to slice() is an end position. The second argument to splice() is a length.) If this second argument is omitted, all array elements from the start element to the end of the array are removed. splice() returns an array of the deleted elements, or an empty array if no elements were deleted. For example:")]),e._v(" "),a("p",[e._v("let a = [1,2,3,4,5,6,7,8];\na.splice(4)    // => [5,6,7,8]; a is now [1,2,3,4]\na.splice(1,2)  // => [2,3]; a is now [1,4]\na.splice(1,1)  // => [4]; a is now [1]\nThe first two arguments to splice() specify which array elements are to be deleted. These arguments may be followed by any number of additional arguments that specify elements to be inserted into the array, starting at the position specified by the first argument. For example:")]),e._v(" "),a("p",[e._v('let a = [1,2,3,4,5];\na.splice(2,0,"a","b")  // => []; a is now [1,2,"a","b",3,4,5]\na.splice(2,2,[1,2],3)  // => ["a","b"]; a is now [1,2,[1,2],3,3,4,5]\nNote that, unlike concat(), splice() inserts arrays themselves, not the elements of those arrays.')]),e._v(" "),a("p",[e._v("FILL()\nThe fill() method sets the elements of an array, or a slice of an array, to a specified value. It mutates the array it is called on, and also returns the modified array:")]),e._v(" "),a("p",[e._v("let a = new Array(5);   // Start with no elements and length 5\na.fill(0)               // => [0,0,0,0,0]; fill the array with zeros\na.fill(9, 1)            // => [0,9,9,9,9]; fill with 9 starting at index 1\na.fill(8, 2, -1)        // => [0,9,8,8,9]; fill with 8 at indexes 2, 3\nThe first argument to fill() is the value to set array elements to. The optional second argument specifies the starting index. If omitted, filling starts at index 0. The optional third argument specifies the ending index—array elements up to, but not including, this index will be filled. If this argument is omitted, then the array is filled from the start index to the end. You can specify indexes relative to the end of the array by passing negative numbers, just as you can for slice().")]),e._v(" "),a("p",[e._v("COPYWITHIN()\ncopyWithin() copies a slice of an array to a new position within the array. It modifies the array in place and returns the modified array, but it will not change the length of the array. The first argument specifies the destination index to which the first element will be copied. The second argument specifies the index of the first element to be copied. If this second argument is omitted, 0 is used. The third argument specifies the end of the slice of elements to be copied. If omitted, the length of the array is used. Elements from the start index up to, but not including, the end index will be copied. You can specify indexes relative to the end of the array by passing negative numbers, just as you can for slice():")]),e._v(" "),a("p",[e._v("let a = [1,2,3,4,5];\na.copyWithin(1)       // => [1,1,2,3,4]: copy array elements up one\na.copyWithin(2, 3, 5) // => [1,1,3,4,4]: copy last 2 elements to index 2\na.copyWithin(0, -2)   // => [4,4,3,4,4]: negative offsets work, too\ncopyWithin() is intended as a high-performance method that is particularly useful with typed arrays (see §11.2). It is modeled after the memmove() function from the C standard library. Note that the copy will work correctly even if there is overlap between the source and destination regions.")]),e._v(" "),a("h3",{attrs:{id:"_7-8-6-array-searching-and-sorting-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-6-array-searching-and-sorting-methods"}},[e._v("#")]),e._v(" 7.8.6 Array Searching and Sorting Methods")]),e._v(" "),a("p",[e._v("Arrays implement indexOf(), lastIndexOf(), and includes() methods that are similar to the same-named methods of strings. There are also sort() and reverse() methods for reordering the elements of an array. These methods are described in the subsections that follow.")]),e._v(" "),a("p",[e._v("INDEXOF() AND LASTINDEXOF()\nindexOf() and lastIndexOf() search an array for an element with a specified value and return the index of the first such element found, or -1 if none is found. indexOf() searches the array from beginning to end, and lastIndexOf() searches from end to beginning:")]),e._v(" "),a("p",[e._v("let a = [0,1,2,1,0];\na.indexOf(1)       // => 1: a[1] is 1\na.lastIndexOf(1)   // => 3: a[3] is 1\na.indexOf(3)       // => -1: no element has value 3\nindexOf() and lastIndexOf() compare their argument to the array elements using the equivalent of the === operator. If your array contains objects instead of primitive values, these methods check to see if two references both refer to exactly the same object. If you want to actually look at the content of an object, try using the find() method with your own custom predicate function instead.")]),e._v(" "),a("p",[e._v("indexOf() and lastIndexOf() take an optional second argument that specifies the array index at which to begin the search. If this argument is omitted, indexOf() starts at the beginning and lastIndexOf() starts at the end. Negative values are allowed for the second argument and are treated as an offset from the end of the array, as they are for the slice() method: a value of –1, for example, specifies the last element of the array.")]),e._v(" "),a("p",[e._v("The following function searches an array for a specified value and returns an array of all matching indexes. This demonstrates how the second argument to indexOf() can be used to find matches beyond the first.")]),e._v(" "),a("p",[e._v("// Find all occurrences of a value x in an array a and return an array\n// of matching indexes\nfunction findall(a, x) {\nlet results = [],            // The array of indexes we'll return\nlen = a.length,          // The length of the array to be searched\npos = 0;                 // The position to search from\nwhile(pos < len) {           // While more elements to search...\npos = a.indexOf(x, pos); // Search\nif (pos === -1) break;   // If nothing found, we're done.\nresults.push(pos);       // Otherwise, store index in array\npos = pos + 1;           // And start next search at next element\n}\nreturn results;              // Return array of indexes\n}\nNote that strings have indexOf() and lastIndexOf() methods that work like these array methods, except that a negative second argument is treated as zero.")]),e._v(" "),a("p",[e._v("INCLUDES()\nThe ES2016 includes() method takes a single argument and returns true if the array contains that value or false otherwise. It does not tell you the index of the value, only whether it exists. The includes() method is effectively a set membership test for arrays. Note, however, that arrays are not an efficient representation for sets, and if you are working with more than a few elements, you should use a real Set object (§11.1.1).")]),e._v(" "),a("p",[e._v("The includes() method is slightly different than the indexOf() method in one important way. indexOf() tests equality using the same algorithm that the === operator does, and that equality algorithm considers the not-a-number value to be different from every other value, including itself. includes() uses a slightly different version of equality that does consider NaN to be equal to itself. This means that indexOf() will not detect the NaN value in an array, but includes() will:")]),e._v(" "),a("p",[e._v("let a = [1,true,3,NaN];\na.includes(true)            // => true\na.includes(2)               // => false\na.includes(NaN)             // => true\na.indexOf(NaN)              // => -1; indexOf can't find NaN\nSORT()\nsort() sorts the elements of an array in place and returns the sorted array. When sort() is called with no arguments, it sorts the array elements in alphabetical order (temporarily converting them to strings to perform the comparison, if necessary):")]),e._v(" "),a("p",[e._v('let a = ["banana", "cherry", "apple"];\na.sort(); // a == ["apple", "banana", "cherry"]\nIf an array contains undefined elements, they are sorted to the end of the array.')]),e._v(" "),a("p",[e._v("To sort an array into some order other than alphabetical, you must pass a comparison function as an argument to sort(). This function decides which of its two arguments should appear first in the sorted array. If the first argument should appear before the second, the comparison function should return a number less than zero. If the first argument should appear after the second in the sorted array, the function should return a number greater than zero. And if the two values are equivalent (i.e., if their order is irrelevant), the comparison function should return 0. So, for example, to sort array elements into numerical rather than alphabetical order, you might do this:")]),e._v(" "),a("p",[e._v("let a = [33, 4, 1111, 222];\na.sort();               // a == [1111, 222, 33, 4]; alphabetical order\na.sort(function(a,b) {  // Pass a comparator function\nreturn a-b;         // Returns < 0, 0, or > 0, depending on order\n});                     // a == [4, 33, 222, 1111]; numerical order\na.sort((a,b) => b-a);   // a == [1111, 222, 33, 4]; reverse numerical order\nAs another example of sorting array items, you might perform a case-insensitive alphabetical sort on an array of strings by passing a comparison function that converts both of its arguments to lowercase (with the toLowerCase() method) before comparing them:")]),e._v(" "),a("p",[e._v('let a = ["ant", "Bug", "cat", "Dog"];\na.sort();    // a == ["Bug","Dog","ant","cat"]; case-sensitive sort\na.sort(function(s,t) {\nlet a = s.toLowerCase();\nlet b = t.toLowerCase();\nif (a < b) return -1;\nif (a > b) return 1;\nreturn 0;\n});   // a == ["ant","Bug","cat","Dog"]; case-insensitive sort\nREVERSE()\nThe reverse() method reverses the order of the elements of an array and returns the reversed array. It does this in place; in other words, it doesn’t create a new array with the elements rearranged but instead rearranges them in the already existing array:')]),e._v(" "),a("p",[e._v("let a = [1,2,3];\na.reverse();   // a == [3,2,1]")]),e._v(" "),a("h3",{attrs:{id:"_7-8-7-array-to-string-conversions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-7-array-to-string-conversions"}},[e._v("#")]),e._v(" 7.8.7 Array to String Conversions")]),e._v(" "),a("p",[e._v("The Array class defines three methods that can convert arrays to strings, which is generally something you might do when creating log and error messages. (If you want to save the contents of an array in textual form for later reuse, serialize the array with JSON.stringify() [§6.8] instead of using the methods described here.)")]),e._v(" "),a("p",[e._v("The join() method converts all the elements of an array to strings and concatenates them, returning the resulting string. You can specify an optional string that separates the elements in the resulting string. If no separator string is specified, a comma is used:")]),e._v(" "),a("p",[e._v('let a = [1, 2, 3];\na.join()               // => "1,2,3"\na.join(" ")            // => "1 2 3"\na.join("")             // => "123"\nlet b = new Array(10); // An array of length 10 with no elements\nb.join("-")            // => "---------": a string of 9 hyphens\nThe join() method is the inverse of the String.split() method, which creates an array by breaking a string into pieces.')]),e._v(" "),a("p",[e._v("Arrays, like all JavaScript objects, have a toString() method. For an array, this method works just like the join() method with no arguments:")]),e._v(" "),a("p",[e._v('[1,2,3].toString()          // => "1,2,3"\n["a", "b", "c"].toString()  // => "a,b,c"\n[1, [2,"c"]].toString()     // => "1,2,c"\nNote that the output does not include square brackets or any other sort of delimiter around the array value.')]),e._v(" "),a("p",[e._v("toLocaleString() is the localized version of toString(). It converts each array element to a string by calling the toLocaleString() method of the element, and then it concatenates the resulting strings using a locale-specific (and implementation-defined) separator string.")]),e._v(" "),a("h3",{attrs:{id:"_7-8-8-static-array-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-8-static-array-functions"}},[e._v("#")]),e._v(" 7.8.8 Static Array Functions")]),e._v(" "),a("p",[e._v("In addition to the array methods we’ve already documented, the Array class also defines three static functions that you can invoke through the Array constructor rather than on arrays. Array.of() and Array.from() are factory methods for creating new arrays. They were documented in §7.1.4 and §7.1.5.")]),e._v(" "),a("p",[e._v("The one other static array function is Array.isArray(), which is useful for determining whether an unknown value is an array or not:")]),e._v(" "),a("p",[e._v("Array.isArray([])     // => true\nArray.isArray({})     // => false")]),e._v(" "),a("h2",{attrs:{id:"_7-9-array-like-objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-9-array-like-objects"}},[e._v("#")]),e._v(" 7.9 Array-Like Objects")]),e._v(" "),a("p",[e._v("As we’ve seen, JavaScript arrays have some special features that other objects do not have:")]),e._v(" "),a("p",[e._v("The length property is automatically updated as new elements are added to the list.")]),e._v(" "),a("p",[e._v("Setting length to a smaller value truncates the array.")]),e._v(" "),a("p",[e._v("Arrays inherit useful methods from Array.prototype.")]),e._v(" "),a("p",[e._v("Array.isArray() returns true for arrays.")]),e._v(" "),a("p",[e._v("These are the features that make JavaScript arrays distinct from regular objects. But they are not the essential features that define an array. It is often perfectly reasonable to treat any object with a numeric length property and corresponding non-negative integer properties as a kind of array.")]),e._v(" "),a("p",[e._v("These “array-like” objects actually do occasionally appear in practice, and although you cannot directly invoke array methods on them or expect special behavior from the length property, you can still iterate through them with the same code you’d use for a true array. It turns out that many array algorithms work just as well with array-like objects as they do with real arrays. This is especially true if your algorithms treat the array as read-only or if they at least leave the array length unchanged.")]),e._v(" "),a("p",[e._v("The following code takes a regular object, adds properties to make it an array-like object, and then iterates through the “elements” of the resulting pseudo-array:")]),e._v(" "),a("p",[e._v("let a = {};  // Start with a regular empty object")]),e._v(" "),a("p",[e._v('// Add properties to make it "array-like"\nlet i = 0;\nwhile(i < 10) {\na[i] = i * i;\ni++;\n}\na.length = i;')]),e._v(" "),a("p",[e._v("// Now iterate through it as if it were a real array\nlet total = 0;\nfor(let j = 0; j < a.length; j++) {\ntotal += a[j];\n}\nIn client-side JavaScript, a number of methods for working with HTML documents (such as document.querySelectorAll(), for example) return array-like objects. Here’s a function you might use to test for objects that work like arrays:")]),e._v(" "),a("p",[e._v('// Determine if o is an array-like object.\n// Strings and functions have numeric length properties, but are\n// excluded by the typeof test. In client-side JavaScript, DOM text\n// nodes have a numeric length property, and may need to be excluded\n// with an additional o.nodeType !== 3 test.\nfunction isArrayLike(o) {\nif (o &&                            // o is not null, undefined, etc.\ntypeof o === "object" &&        // o is an object\nNumber.isFinite(o.length) &&    // o.length is a finite number\no.length >= 0 &&                // o.length is non-negative\nNumber.isInteger(o.length) &&   // o.length is an integer\no.length < 4294967295) {        // o.length < 2^32 - 1\nreturn true;                    // Then o is array-like.\n} else {\nreturn false;                   // Otherwise it is not.\n}\n}\nWe’ll see in a later section that strings behave like arrays. Nevertheless, tests like this one for array-like objects typically return false for strings—they are usually best handled as strings, not as arrays.')]),e._v(" "),a("p",[e._v("Most JavaScript array methods are purposely defined to be generic so that they work correctly when applied to array-like objects in addition to true arrays. Since array-like objects do not inherit from Array.prototype, you cannot invoke array methods on them directly. You can invoke them indirectly using the Function.call method, however (see §8.7.4 for details):")]),e._v(" "),a("p",[e._v('let a = {"0": "a", "1": "b", "2": "c", length: 3}; // An array-like object\nArray.prototype.join.call(a, "+")                  // => "a+b+c"\nArray.prototype.map.call(a, x => x.toUpperCase())  // => ["A","B","C"]\nArray.prototype.slice.call(a, 0)   // => ["a","b","c"]: true array copy\nArray.from(a)                      // => ["a","b","c"]: easier array copy\nThe second-to-last line of this code invokes the Array slice() method on an array-like object in order to copy the elements of that object into a true array object. This is an idiomatic trick that exists in much legacy code, but is now much easier to do with Array.from().')]),e._v(" "),a("h2",{attrs:{id:"_7-10-strings-as-arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-10-strings-as-arrays"}},[e._v("#")]),e._v(" 7.10 Strings as Arrays")]),e._v(" "),a("p",[e._v("JavaScript strings behave like read-only arrays of UTF-16 Unicode characters. Instead of accessing individual characters with the charAt() method, you can use square brackets:")]),e._v(" "),a("p",[e._v('let s = "test";\ns.charAt(0)    // => "t"\ns[1]           // => "e"\nThe typeof operator still returns “string” for strings, of course, and the Array.isArray() method returns false if you pass it a string.')]),e._v(" "),a("p",[e._v("The primary benefit of indexable strings is simply that we can replace calls to charAt() with square brackets, which are more concise and readable, and potentially more efficient. The fact that strings behave like arrays also means, however, that we can apply generic array methods to them. For example:")]),e._v(" "),a("p",[e._v('Array.prototype.join.call("JavaScript", " ")  // => "J a v a S c r i p t"\nKeep in mind that strings are immutable values, so when they are treated as arrays, they are read-only arrays. Array methods like push(), sort(), reverse(), and splice() modify an array in place and do not work on strings. Attempting to modify a string using an array method does not, however, cause an error: it simply fails silently.')]),e._v(" "),a("h2",{attrs:{id:"_7-11-summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-11-summary"}},[e._v("#")]),e._v(" 7.11 Summary")]),e._v(" "),a("p",[e._v("This chapter has covered JavaScript arrays in depth, including esoteric details about sparse arrays and array-like objects. The main points to take from this chapter are:")]),e._v(" "),a("p",[e._v("Array literals are written as comma-separated lists of values within square brackets.")]),e._v(" "),a("p",[e._v("Individual array elements are accessed by specifying the desired array index within square brackets.")]),e._v(" "),a("p",[e._v("The for/of loop and ... spread operator introduced in ES6 are particularly useful ways to iterate arrays.")]),e._v(" "),a("p",[e._v("The Array class defines a rich set of methods for manipulating arrays, and you should be sure to familiarize yourself with the Array API.")])])}),[],!1,null,null,null);t.default=n.exports}}]);